// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Pipeline_1(
  input         clock,
                reset,
  output        io_in_ready,	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:7:14]
  input         io_in_valid,	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:7:14]
  input  [63:0] io_in_bits_data,	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:7:14]
  input         io_in_bits_fromDMA,	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:7:14]
                io_out_ready,	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:7:14]
  output        io_out_valid,	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:7:14]
  output [63:0] io_out_bits_data,	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:7:14]
  output        io_out_bits_fromDMA	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:7:14]
);

  wire        stalling_2;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:30:16]
  wire        stalling_1;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:30:16]
  reg  [63:0] stages_0_data;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
  reg         stages_0_fromDMA;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
  reg  [63:0] stages_1_data;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
  reg         stages_1_fromDMA;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
  reg  [63:0] stages_2_data;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
  reg         stages_2_fromDMA;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
  reg  [63:0] stages_3_data;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
  reg         stages_3_fromDMA;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
  reg         valids_0;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25]
  reg         valids_1;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25]
  reg         valids_2;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25]
  reg         valids_3;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25]
  wire        stalling_3 = valids_3 & ~io_out_ready;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25, :28:{34,37}]
  wire        stalling_0 = valids_0 & stalling_1;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25, :30:16]
  assign stalling_1 = valids_1 & stalling_2;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25, :30:16]
  assign stalling_2 = valids_2 & stalling_3;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25, :28:34, :30:16]
  wire        _GEN = ~stalling_0 & io_in_valid;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:27:20, :30:16, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  always @(posedge clock) begin
    if (_GEN) begin	// @[src/main/scala/chisel3/util/Decoupled.scala:52:35]
      stages_0_data <= io_in_bits_data;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
      stages_0_fromDMA <= io_in_bits_fromDMA;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
    end
    if (~stalling_1) begin	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:30:16]
      stages_1_data <= stages_0_data;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
      stages_1_fromDMA <= stages_0_fromDMA;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
    end
    if (~stalling_2) begin	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:30:16]
      stages_2_data <= stages_1_data;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
      stages_2_fromDMA <= stages_1_fromDMA;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
    end
    if (~stalling_3) begin	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:28:34]
      stages_3_data <= stages_2_data;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
      stages_3_fromDMA <= stages_2_fromDMA;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
    end
    if (reset) begin
      valids_0 <= 1'h0;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21, :22:25]
      valids_1 <= 1'h0;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21, :22:25]
      valids_2 <= 1'h0;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21, :22:25]
      valids_3 <= 1'h0;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21, :22:25]
    end
    else begin
      valids_0 <= _GEN | stalling_1 & valids_0;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25, :30:16, :40:17, :41:12, :45:22, :46:19, src/main/scala/chisel3/util/Decoupled.scala:52:35]
      valids_1 <= valids_0 | stalling_2 & valids_1;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25, :30:16, :40:17, :41:12, :49:16, :50:12]
      valids_2 <= valids_1 | stalling_3 & valids_2;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25, :28:34, :40:17, :41:12, :49:16, :50:12]
      valids_3 <= valids_2 | ~io_out_ready & valids_3;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25, :36:24, :37:19, :49:16, :50:12]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:8];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'h9; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        stages_0_data = {_RANDOM[4'h0], _RANDOM[4'h1]};	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
        stages_0_fromDMA = _RANDOM[4'h2][0];	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
        stages_1_data = {_RANDOM[4'h2][31:1], _RANDOM[4'h3], _RANDOM[4'h4][0]};	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
        stages_1_fromDMA = _RANDOM[4'h4][1];	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
        stages_2_data = {_RANDOM[4'h4][31:2], _RANDOM[4'h5], _RANDOM[4'h6][1:0]};	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
        stages_2_fromDMA = _RANDOM[4'h6][2];	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
        stages_3_data = {_RANDOM[4'h6][31:3], _RANDOM[4'h7], _RANDOM[4'h8][2:0]};	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
        stages_3_fromDMA = _RANDOM[4'h8][3];	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
        valids_0 = _RANDOM[4'h8][4];	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21, :22:25]
        valids_1 = _RANDOM[4'h8][5];	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21, :22:25]
        valids_2 = _RANDOM[4'h8][6];	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21, :22:25]
        valids_3 = _RANDOM[4'h8][7];	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21, :22:25]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = ~stalling_0;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:27:20, :30:16]
  assign io_out_valid = valids_3;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:22:25]
  assign io_out_bits_data = stages_3_data;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
  assign io_out_bits_fromDMA = stages_3_fromDMA;	// @[generators/gemmini/src/main/scala/gemmini/Pipeline.scala:21:21]
endmodule

