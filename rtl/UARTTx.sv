// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module UARTTx(
  input         clock,
                reset,
                io_en,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:22:14]
  output        io_in_ready,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:22:14]
  input         io_in_valid,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:22:14]
  input  [7:0]  io_in_bits,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:22:14]
  output        io_out,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:22:14]
  input  [15:0] io_div,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:22:14]
  input         io_nstop	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:22:14]
);

  wire [31:0] _plusarg_reader_1_out;	// @[generators/rocket-chip/src/main/scala/util/PlusArg.scala:80:11]
  wire [31:0] _plusarg_reader_out;	// @[generators/rocket-chip/src/main/scala/util/PlusArg.scala:80:11]
  reg  [15:0] prescaler;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:52:26]
  reg  [3:0]  counter;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:57:24]
  reg  [8:0]  shifter;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:58:20]
  reg         out;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:59:20]
  wire        _io_in_ready_output = io_en & ~(|counter);	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:57:24, :65:23, :66:{24,27}]
  wire        _GEN = _io_in_ready_output & io_in_valid;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:66:24, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  `ifndef SYNTHESIS	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:69:11]
    always @(posedge clock) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:69:11]
      if ((`PRINTF_COND_) & _GEN & (|_plusarg_reader_1_out) & ~reset)	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:63:85, :69:11, generators/rocket-chip/src/main/scala/util/PlusArg.scala:80:11, src/main/scala/chisel3/util/Decoupled.scala:52:35]
        $fwrite(32'h80000002, "UART TX (%x): %c\n", io_in_bits, io_in_bits);	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:69:11]
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        pulse = prescaler == 16'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:52:26, :53:26]
  wire        _GEN_0 = _GEN & (|_plusarg_reader_out);	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:62:90, :71:20, generators/rocket-chip/src/main/scala/util/PlusArg.scala:80:11, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  wire        _GEN_1 = pulse & (|counter);	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:53:26, :57:24, :65:23, :94:15]
  always @(posedge clock) begin
    if (reset) begin
      prescaler <= 16'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:52:26]
      counter <= 4'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:57:24]
      out <= 1'h1;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:59:20]
    end
    else begin
      if (|counter) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:57:24, :65:23]
        if (pulse)	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:53:26]
          prescaler <= io_div;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:52:26]
        else	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:53:26]
          prescaler <= prescaler - 16'h1;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:52:26, :92:78]
      end
      if (_GEN_1) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:94:15]
        counter <= counter - 4'h1;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:57:24, :95:24]
        out <= shifter[0];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:58:20, :59:20, :97:19]
      end
      else if (_GEN_0)	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:71:20]
        counter <= (io_nstop ? 4'hB : 4'h0) | (io_nstop ? 4'h0 : 4'hA);	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:57:24, src/main/scala/chisel3/util/Mux.scala:30:73]
    end
    if (_GEN_1)	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:94:15]
      shifter <= {1'h1, shifter[8:1]};	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:58:20, :96:{19,38}]
    else if (_GEN_0)	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:71:20]
      shifter <= {io_in_bits, 1'h0};	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:58:20, :86:15]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        prescaler = _RANDOM[/*Zero width*/ 1'b0][15:0];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:52:26]
        counter = _RANDOM[/*Zero width*/ 1'b0][19:16];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:52:26, :57:24]
        shifter = _RANDOM[/*Zero width*/ 1'b0][28:20];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:52:26, :58:20]
        out = _RANDOM[/*Zero width*/ 1'b0][29];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:52:26, :59:20]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  plusarg_reader #(
    .DEFAULT(1),
    .FORMAT("uart_tx=%d"),
    .WIDTH(32)
  ) plusarg_reader (	// @[generators/rocket-chip/src/main/scala/util/PlusArg.scala:80:11]
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("uart_tx_printf=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (	// @[generators/rocket-chip/src/main/scala/util/PlusArg.scala:80:11]
    .out (_plusarg_reader_1_out)
  );
  assign io_in_ready = _io_in_ready_output;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:66:24]
  assign io_out = out;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTTx.scala:59:20]
endmodule

