// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module WeightedArbiter(
  input         clock,
                reset,
  output        io_inA_ready,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  input         io_inA_valid,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  input  [63:0] io_inA_bits_rs1,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
                io_inA_bits_rs2,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  output        io_inB_ready,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  input         io_inB_valid,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  input  [63:0] io_inB_bits_rs1,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
                io_inB_bits_rs2,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  input         io_forceA,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
                io_forceB,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
                io_out_ready,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  output        io_out_valid,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  output [6:0]  io_out_bits_inst_funct,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  output [63:0] io_out_bits_rs1,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
                io_out_bits_rs2,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  input         io_inA_idle,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
                io_inB_idle,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
  input  [15:0] io_inA_k,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
                io_inB_k,	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
                io_inB_j	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14]
);

  wire _GEN = io_inA_k > io_inB_k | io_inB_k == 16'h0 & io_inB_j == 16'h0;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:57:{25,36,49,57,69}]
  wire _GEN_0 = io_forceB | io_inA_idle;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:36:25, :37:12, :38:30, :53:24, :54:14, :55:29]
  wire _GEN_1 = io_inB_idle | ~_GEN;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:31:16, :55:29, :56:14, :57:{36,79}, :60:14]
  wire _GEN_2 = io_forceA | ~(_GEN_0 | ~_GEN_1);	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:34:19, :35:12, :36:25, :37:12, :38:30, :53:24, :54:14, :55:29, :56:14, :57:79]
  `ifndef SYNTHESIS	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:72:9]
    always @(posedge clock) begin	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:72:9]
      if (~reset & io_forceA & io_forceB) begin	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:72:9]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:72:9]
          $error("Assertion failed\n    at WeightedArbiter.scala:72 assert(!(io.forceA && io.forceB))\n");	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:72:9]
        if (`STOP_COND_)	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:72:9]
          $fatal;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:72:9]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign io_inA_ready = (io_forceA | ~_GEN_0 & _GEN_1) & io_out_ready;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:31:16, :34:19, :35:12, :36:25, :37:12, :38:30, :53:24, :54:14, :55:29, :56:14, :57:79]
  assign io_inB_ready = ~io_forceA & (_GEN_0 | ~io_inB_idle & _GEN) & io_out_ready;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:32:16, :34:19, :36:25, :37:12, :38:30, :53:24, :54:14, :55:29, :57:{36,79}]
  assign io_out_valid = _GEN_2 ? io_inA_valid : io_inB_valid;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:34:19, :35:12, :36:25]
  assign io_out_bits_inst_funct = _GEN_2 ? 7'h2 : 7'h1;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:8:14, :34:19, :35:12, :36:25, :40:29, :41:16, :44:16]
  assign io_out_bits_rs1 = _GEN_2 ? io_inA_bits_rs1 : io_inB_bits_rs1;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:34:19, :35:12, :36:25]
  assign io_out_bits_rs2 = _GEN_2 ? io_inA_bits_rs2 : io_inB_bits_rs2;	// @[generators/gemmini/src/main/scala/gemmini/WeightedArbiter.scala:34:19, :35:12, :36:25]
endmodule

