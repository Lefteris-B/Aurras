// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AsyncQueue(
  input         io_enq_clock,	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
                io_enq_reset,	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
  output        io_enq_ready,	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
  input         io_enq_valid,	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
  input  [31:0] io_enq_bits,	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
  input         io_deq_clock,	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
                io_deq_reset,	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
                io_deq_ready,	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
  output        io_deq_valid,	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
  output [31:0] io_deq_bits	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:223:14]
);

  wire [3:0]  _sink_io_async_ridx;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:225:70]
  wire        _sink_io_async_safe_ridx_valid;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:225:70]
  wire        _sink_io_async_safe_sink_reset_n;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:225:70]
  wire [31:0] _source_io_async_mem_0;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire [31:0] _source_io_async_mem_1;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire [31:0] _source_io_async_mem_2;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire [31:0] _source_io_async_mem_3;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire [31:0] _source_io_async_mem_4;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire [31:0] _source_io_async_mem_5;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire [31:0] _source_io_async_mem_6;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire [31:0] _source_io_async_mem_7;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire [3:0]  _source_io_async_widx;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire        _source_io_async_safe_widx_valid;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  wire        _source_io_async_safe_source_reset_n;	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
  AsyncQueueSource_3 source (	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .clock                        (io_enq_clock),
    .reset                        (io_enq_reset),
    .io_enq_ready                 (io_enq_ready),
    .io_enq_valid                 (io_enq_valid),
    .io_enq_bits                  (io_enq_bits),
    .io_async_mem_0               (_source_io_async_mem_0),
    .io_async_mem_1               (_source_io_async_mem_1),
    .io_async_mem_2               (_source_io_async_mem_2),
    .io_async_mem_3               (_source_io_async_mem_3),
    .io_async_mem_4               (_source_io_async_mem_4),
    .io_async_mem_5               (_source_io_async_mem_5),
    .io_async_mem_6               (_source_io_async_mem_6),
    .io_async_mem_7               (_source_io_async_mem_7),
    .io_async_ridx                (_sink_io_async_ridx),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:225:70]
    .io_async_widx                (_source_io_async_widx),
    .io_async_safe_ridx_valid     (_sink_io_async_safe_ridx_valid),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:225:70]
    .io_async_safe_widx_valid     (_source_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n (_source_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n   (_sink_io_async_safe_sink_reset_n)	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:225:70]
  );
  AsyncQueueSink_3 sink (	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:225:70]
    .clock                        (io_deq_clock),
    .reset                        (io_deq_reset),
    .io_deq_ready                 (io_deq_ready),
    .io_deq_valid                 (io_deq_valid),
    .io_deq_bits                  (io_deq_bits),
    .io_async_mem_0               (_source_io_async_mem_0),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_mem_1               (_source_io_async_mem_1),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_mem_2               (_source_io_async_mem_2),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_mem_3               (_source_io_async_mem_3),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_mem_4               (_source_io_async_mem_4),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_mem_5               (_source_io_async_mem_5),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_mem_6               (_source_io_async_mem_6),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_mem_7               (_source_io_async_mem_7),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_ridx                (_sink_io_async_ridx),
    .io_async_widx                (_source_io_async_widx),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_safe_ridx_valid     (_sink_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid     (_source_io_async_safe_widx_valid),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_safe_source_reset_n (_source_io_async_safe_source_reset_n),	// @[generators/rocket-chip/src/main/scala/util/AsyncQueue.scala:224:70]
    .io_async_safe_sink_reset_n   (_sink_io_async_safe_sink_reset_n)
  );
endmodule

