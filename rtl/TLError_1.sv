// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module TLError_1(
  input        clock,
               reset,
  output       auto_in_a_ready,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:367:18]
  input        auto_in_a_valid,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:367:18]
  input  [2:0] auto_in_a_bits_opcode,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:367:18]
  input        auto_in_d_ready,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:367:18]
  output       auto_in_d_valid,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:367:18]
  output [2:0] auto_in_d_bits_opcode,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:367:18]
  output       auto_in_d_bits_denied,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:367:18]
               auto_in_d_bits_corrupt	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:367:18]
);

  wire            da_ready;	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:94:31]
  wire [2:0]      da_bits_opcode;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:35:21]
  wire [7:0][2:0] _GEN = '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:35:21]
  reg             idle;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23]
  reg             counter;	// @[generators/rocket-chip/src/main/scala/tilelink/Edges.scala:230:27]
  wire            winner_1 = auto_in_a_valid & idle;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23, :33:35]
  assign da_bits_opcode = _GEN[auto_in_a_bits_opcode];	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:35:21]
  reg             beatsLeft;	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:60:30]
  `ifndef SYNTHESIS	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:31:12]
    always @(posedge clock) begin	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:31:12]
      if (~reset & ~(idle | ~counter)) begin	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23, :31:{12,18}, generators/rocket-chip/src/main/scala/tilelink/Edges.scala:230:27, :232:25]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:31:12]
          $error("Assertion failed\n    at Error.scala:31 assert (idle || da_first) // we only send Grant, never GrantData => simplified flow control below\n");	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:31:12]
        if (`STOP_COND_)	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:31:12]
          $fatal;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:31:12]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg             state_1;	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:88:26]
  wire            _nodeIn_d_bits_WIRE_5 = beatsLeft ? state_1 : winner_1;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:33:35, generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:60:30, :88:26, :89:25]
  assign da_ready = auto_in_d_ready & (~beatsLeft | state_1);	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:60:30, :61:28, :88:26, :92:24, :94:31]
  wire            nodeIn_d_valid = (~beatsLeft | state_1) & winner_1;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:33:35, generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:60:30, :88:26, :96:24]
  wire            done = da_ready & winner_1;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:33:35, generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:94:31, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  always @(posedge clock) begin
    if (reset) begin
      idle <= 1'h1;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23]
      counter <= 1'h0;	// @[generators/rocket-chip/src/main/scala/tilelink/Edges.scala:230:27]
      beatsLeft <= 1'h0;	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:60:30]
      state_1 <= 1'h0;	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:88:26]
    end
    else begin
      idle <= ~(done & da_bits_opcode == 3'h4) & idle;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23, :35:21, :52:{21,39,50,57}, generators/rocket-chip/src/main/scala/tilelink/Bundles.scala:47:27, src/main/scala/chisel3/util/Decoupled.scala:52:35]
      counter <= (~done | counter - 1'h1) & counter;	// @[generators/rocket-chip/src/main/scala/tilelink/Edges.scala:230:27, :231:28, :236:17, :237:15, src/main/scala/chisel3/util/Decoupled.scala:52:35]
      beatsLeft <= ~(~beatsLeft & auto_in_d_ready) & beatsLeft - (auto_in_d_ready & nodeIn_d_valid);	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:60:30, :61:28, :62:24, :85:{23,52}, :96:24, src/main/scala/chisel3/util/Decoupled.scala:52:35]
      if (beatsLeft) begin	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:60:30]
      end
      else	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:60:30]
        state_1 <= winner_1;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:33:35, generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:88:26]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        idle = _RANDOM[/*Zero width*/ 1'b0][0];	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23]
        counter = _RANDOM[/*Zero width*/ 1'b0][2];	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23, generators/rocket-chip/src/main/scala/tilelink/Edges.scala:230:27]
        beatsLeft = _RANDOM[/*Zero width*/ 1'b0][5];	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23, generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:60:30]
        state_1 = _RANDOM[/*Zero width*/ 1'b0][7];	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23, generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:88:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_a_ready = da_ready & idle;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:26:23, :32:37, generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:94:31]
  assign auto_in_d_valid = nodeIn_d_valid;	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:96:24]
  assign auto_in_d_bits_opcode = _nodeIn_d_bits_WIRE_5 ? da_bits_opcode : 3'h0;	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:35:21, generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:89:25, generators/rocket-chip/src/main/scala/tilelink/Bundles.scala:260:74, src/main/scala/chisel3/util/Mux.scala:30:73]
  assign auto_in_d_bits_denied = _nodeIn_d_bits_WIRE_5;	// @[generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:89:25]
  assign auto_in_d_bits_corrupt = _nodeIn_d_bits_WIRE_5 & da_bits_opcode[0];	// @[generators/rocket-chip/src/main/scala/devices/tilelink/Error.scala:35:21, generators/rocket-chip/src/main/scala/tilelink/Arbiter.scala:89:25, generators/rocket-chip/src/main/scala/tilelink/Edges.scala:107:36, src/main/scala/chisel3/util/Mux.scala:30:73]
endmodule

