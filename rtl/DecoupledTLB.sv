// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module DecoupledTLB(
  input         clock,
                reset,
                io_req_valid,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [33:0] io_req_bits_tlb_req_vaddr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [4:0]  io_req_bits_tlb_req_cmd,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_req_bits_status_debug,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_req_bits_status_mxr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  output [31:0] io_resp_paddr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  output [20:0] io_ptw_req_bits_bits_addr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  output        io_ptw_req_bits_bits_need_gpa,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_req_bits_bits_vstage1,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_req_bits_bits_stage2,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_0_cfg_l,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [1:0]  io_ptw_pmp_0_cfg_a,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_0_cfg_w,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_pmp_0_cfg_r,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [29:0] io_ptw_pmp_0_addr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [31:0] io_ptw_pmp_0_mask,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_1_cfg_l,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [1:0]  io_ptw_pmp_1_cfg_a,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_1_cfg_w,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_pmp_1_cfg_r,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [29:0] io_ptw_pmp_1_addr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [31:0] io_ptw_pmp_1_mask,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_2_cfg_l,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [1:0]  io_ptw_pmp_2_cfg_a,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_2_cfg_w,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_pmp_2_cfg_r,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [29:0] io_ptw_pmp_2_addr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [31:0] io_ptw_pmp_2_mask,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_3_cfg_l,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [1:0]  io_ptw_pmp_3_cfg_a,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_3_cfg_w,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_pmp_3_cfg_r,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [29:0] io_ptw_pmp_3_addr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [31:0] io_ptw_pmp_3_mask,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_4_cfg_l,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [1:0]  io_ptw_pmp_4_cfg_a,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_4_cfg_w,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_pmp_4_cfg_r,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [29:0] io_ptw_pmp_4_addr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [31:0] io_ptw_pmp_4_mask,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_5_cfg_l,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [1:0]  io_ptw_pmp_5_cfg_a,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_5_cfg_w,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_pmp_5_cfg_r,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [29:0] io_ptw_pmp_5_addr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [31:0] io_ptw_pmp_5_mask,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_6_cfg_l,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [1:0]  io_ptw_pmp_6_cfg_a,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_6_cfg_w,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_pmp_6_cfg_r,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [29:0] io_ptw_pmp_6_addr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [31:0] io_ptw_pmp_6_mask,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_7_cfg_l,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [1:0]  io_ptw_pmp_7_cfg_a,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_ptw_pmp_7_cfg_w,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_ptw_pmp_7_cfg_r,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [29:0] io_ptw_pmp_7_addr,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input  [31:0] io_ptw_pmp_7_mask,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  output        io_exp_interrupt,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  input         io_exp_flush_retry,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_exp_flush_skip,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
  output        io_counter_event_signal_16,	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
                io_counter_event_signal_17	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:33:14]
);

  wire _tlb_io_resp_pf_ld;	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:46:19]
  wire _tlb_io_resp_pf_st;	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:46:19]
  wire _tlb_io_resp_ae_ld;	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:46:19]
  wire _tlb_io_resp_ae_st;	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:46:19]
  reg  interrupt;	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:43:26]
  `ifndef SYNTHESIS	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:68:9]
    always @(posedge clock) begin	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:68:9]
      if (~reset & ~(~io_exp_flush_retry | ~io_exp_flush_skip)) begin	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:68:{9,10,30,33}]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:68:9]
          $error("Assertion failed: TLB: flushing with both retry and skip at same time\n    at FrontendTLB.scala:68 assert(!io.exp.flush_retry || !io.exp.flush_skip, \"TLB: flushing with both retry and skip at same time\")\n");	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:68:9]
        if (`STOP_COND_)	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:68:9]
          $fatal;	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:68:9]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset)
      interrupt <= 1'h0;	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:43:26]
    else
      interrupt <= ~(interrupt & (io_exp_flush_retry | io_exp_flush_skip)) & (io_req_valid & (io_req_bits_tlb_req_cmd == 5'h0 ? _tlb_io_resp_pf_ld | _tlb_io_resp_ae_ld : _tlb_io_resp_pf_st | _tlb_io_resp_ae_st) | interrupt);	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:25:49, :43:26, :46:19, :62:{32,38,63,92,132}, :63:{20,32}, :64:{19,42}, :65:15]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        interrupt = _RANDOM[/*Zero width*/ 1'b0][0];	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:43:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  TLB_1 tlb (	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:46:19]
    .io_req_bits_vaddr             (io_req_bits_tlb_req_vaddr),
    .io_req_bits_cmd               (io_req_bits_tlb_req_cmd),
    .io_resp_paddr                 (io_resp_paddr),
    .io_resp_pf_ld                 (_tlb_io_resp_pf_ld),
    .io_resp_pf_st                 (_tlb_io_resp_pf_st),
    .io_resp_ae_ld                 (_tlb_io_resp_ae_ld),
    .io_resp_ae_st                 (_tlb_io_resp_ae_st),
    .io_ptw_req_bits_bits_addr     (io_ptw_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa (io_ptw_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1  (io_ptw_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2   (io_ptw_req_bits_bits_stage2),
    .io_ptw_status_debug           (io_req_bits_status_debug),
    .io_ptw_status_mxr             (io_req_bits_status_mxr),
    .io_ptw_pmp_0_cfg_l            (io_ptw_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a            (io_ptw_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_w            (io_ptw_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r            (io_ptw_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr             (io_ptw_pmp_0_addr),
    .io_ptw_pmp_0_mask             (io_ptw_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l            (io_ptw_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a            (io_ptw_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_w            (io_ptw_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r            (io_ptw_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr             (io_ptw_pmp_1_addr),
    .io_ptw_pmp_1_mask             (io_ptw_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l            (io_ptw_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a            (io_ptw_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_w            (io_ptw_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r            (io_ptw_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr             (io_ptw_pmp_2_addr),
    .io_ptw_pmp_2_mask             (io_ptw_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l            (io_ptw_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a            (io_ptw_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_w            (io_ptw_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r            (io_ptw_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr             (io_ptw_pmp_3_addr),
    .io_ptw_pmp_3_mask             (io_ptw_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l            (io_ptw_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a            (io_ptw_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_w            (io_ptw_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r            (io_ptw_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr             (io_ptw_pmp_4_addr),
    .io_ptw_pmp_4_mask             (io_ptw_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l            (io_ptw_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a            (io_ptw_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_w            (io_ptw_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r            (io_ptw_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr             (io_ptw_pmp_5_addr),
    .io_ptw_pmp_5_mask             (io_ptw_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l            (io_ptw_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a            (io_ptw_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_w            (io_ptw_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r            (io_ptw_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr             (io_ptw_pmp_6_addr),
    .io_ptw_pmp_6_mask             (io_ptw_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l            (io_ptw_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a            (io_ptw_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_w            (io_ptw_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r            (io_ptw_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr             (io_ptw_pmp_7_addr),
    .io_ptw_pmp_7_mask             (io_ptw_pmp_7_mask)
  );
  assign io_exp_interrupt = interrupt;	// @[generators/gemmini/src/main/scala/gemmini/FrontendTLB.scala:43:26]
  assign io_counter_event_signal_16 = io_req_valid;
  assign io_counter_event_signal_17 = io_req_valid;
endmodule

