// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module MSHR(
  input         clock,
                reset,
                io_allocate_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_allocate_bits_prio_0,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_allocate_bits_prio_1,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_allocate_bits_prio_2,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_allocate_bits_control,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [2:0]  io_allocate_bits_opcode,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_allocate_bits_param,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_allocate_bits_size,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [8:0]  io_allocate_bits_source,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [15:0] io_allocate_bits_tag,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [5:0]  io_allocate_bits_offset,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [4:0]  io_allocate_bits_put,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [6:0]  io_allocate_bits_set,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input         io_allocate_bits_repeat,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_directory_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_directory_bits_dirty,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [1:0]  io_directory_bits_state,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input         io_directory_bits_clients,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [15:0] io_directory_bits_tag,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input         io_directory_bits_hit,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [1:0]  io_directory_bits_way,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_status_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [6:0]  io_status_bits_set,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [15:0] io_status_bits_tag,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [1:0]  io_status_bits_way,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_status_bits_blockC,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_status_bits_nestC,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input         io_schedule_ready,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_schedule_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_a_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [15:0] io_schedule_bits_a_bits_tag,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [6:0]  io_schedule_bits_a_bits_set,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [2:0]  io_schedule_bits_a_bits_param,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_schedule_bits_a_bits_block,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_b_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [2:0]  io_schedule_bits_b_bits_param,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [15:0] io_schedule_bits_b_bits_tag,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [6:0]  io_schedule_bits_b_bits_set,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_schedule_bits_b_bits_clients,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_c_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [2:0]  io_schedule_bits_c_bits_opcode,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_c_bits_param,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [15:0] io_schedule_bits_c_bits_tag,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [6:0]  io_schedule_bits_c_bits_set,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [1:0]  io_schedule_bits_c_bits_way,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_schedule_bits_c_bits_dirty,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_d_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_d_bits_prio_0,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_d_bits_prio_2,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [2:0]  io_schedule_bits_d_bits_opcode,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_d_bits_param,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_d_bits_size,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [8:0]  io_schedule_bits_d_bits_source,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [5:0]  io_schedule_bits_d_bits_offset,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [4:0]  io_schedule_bits_d_bits_put,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [6:0]  io_schedule_bits_d_bits_set,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [1:0]  io_schedule_bits_d_bits_way,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_schedule_bits_d_bits_bad,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_e_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [2:0]  io_schedule_bits_e_bits_sink,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_schedule_bits_x_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_schedule_bits_dir_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [6:0]  io_schedule_bits_dir_bits_set,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [1:0]  io_schedule_bits_dir_bits_way,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_schedule_bits_dir_bits_data_dirty,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [1:0]  io_schedule_bits_dir_bits_data_state,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_schedule_bits_dir_bits_data_clients,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output [15:0] io_schedule_bits_dir_bits_data_tag,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  output        io_schedule_bits_reload,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input         io_sinkc_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_sinkc_bits_last,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [15:0] io_sinkc_bits_tag,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [8:0]  io_sinkc_bits_source,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [2:0]  io_sinkc_bits_param,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input         io_sinkc_bits_data,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_sinkd_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_sinkd_bits_last,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [2:0]  io_sinkd_bits_opcode,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_sinkd_bits_param,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_sinkd_bits_sink,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input         io_sinkd_bits_denied,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_sinke_valid,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [6:0]  io_nestedwb_set,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input  [15:0] io_nestedwb_tag,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
  input         io_nestedwb_b_toN,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_nestedwb_b_toB,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_nestedwb_b_clr_dirty,	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
                io_nestedwb_c_set_dirty	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
);

  reg         request_valid;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30]
  reg         request_prio_0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg         request_prio_1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg         request_prio_2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg         request_control;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg  [2:0]  request_opcode;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg  [2:0]  request_param;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg  [2:0]  request_size;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg  [8:0]  request_source;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg  [15:0] request_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg  [5:0]  request_offset;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg  [4:0]  request_put;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg  [6:0]  request_set;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  reg         meta_valid;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:99:27]
  reg         meta_dirty;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  reg  [1:0]  meta_state;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  reg         evict_c;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  reg  [15:0] meta_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  reg         meta_hit;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  reg  [1:0]  meta_way;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  reg         s_rprobe;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:121:33]
  reg         w_rprobeackfirst;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:122:33]
  reg         w_rprobeacklast;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:123:33]
  reg         s_release;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:124:33]
  reg         w_releaseack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:125:33]
  reg         s_pprobe;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:126:33]
  reg         s_acquire;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:127:33]
  reg         s_flush;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:128:33]
  reg         w_grantfirst;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:129:33]
  reg         w_grantlast;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:130:33]
  reg         w_grant;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:131:33]
  reg         w_pprobeackfirst;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:132:33]
  reg         w_pprobeacklast;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:133:33]
  reg         w_pprobeack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:134:33]
  reg         s_grantack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33]
  reg         s_execute;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:137:33]
  reg         w_grantack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:138:33]
  reg         s_writeback;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:139:33]
  reg  [2:0]  sink;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:147:17]
  reg         gotT;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:148:17]
  reg         bad_grant;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:149:22]
  reg         probes_done;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:150:24]
  reg         probes_toN;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:151:23]
  wire        _io_status_bits_nestC_output = meta_valid & (~w_rprobeackfirst | ~w_pprobeackfirst | ~w_grantfirst);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:99:27, :122:33, :129:33, :132:33, :168:103, :173:{39,43,64,82}]
  wire        no_wait = w_rprobeacklast & w_releaseack & w_grantlast & w_pprobeacklast & w_grantack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:123:33, :125:33, :130:33, :133:33, :138:33, :183:83]
  wire        _io_schedule_bits_a_valid_output = ~s_acquire & s_release & s_pprobe;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:124:33, :126:33, :127:33, :184:{31,55}]
  wire        _io_schedule_bits_b_valid_output = ~s_rprobe | ~s_pprobe;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:121:33, :126:33, :185:{31,41,44}]
  wire        _io_schedule_bits_c_valid_output = ~s_release & w_rprobeackfirst;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:122:33, :124:33, :186:{32,43}]
  wire        _io_schedule_bits_d_valid_output = ~s_execute & w_pprobeack & w_grant;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:131:33, :134:33, :137:33, :187:{31,57}]
  wire        _io_schedule_bits_e_valid_output = ~s_grantack & w_grantfirst;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:129:33, :136:33, :188:{31,43}]
  wire        _io_schedule_bits_x_valid_output = ~s_flush & w_releaseack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:125:33, :128:33, :189:{31,40}]
  wire        _io_schedule_bits_dir_valid_output = ~s_release & w_rprobeackfirst | ~s_writeback & no_wait;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:122:33, :124:33, :139:33, :183:83, :186:32, :190:{45,66,70,83}]
  wire        _io_schedule_valid_output = _io_schedule_bits_a_valid_output | _io_schedule_bits_b_valid_output | _io_schedule_bits_c_valid_output | _io_schedule_bits_d_valid_output | _io_schedule_bits_e_valid_output | _io_schedule_bits_x_valid_output | _io_schedule_bits_dir_valid_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:184:55, :185:41, :186:43, :187:57, :188:43, :189:40, :190:66, :193:105]
  wire        req_clientBit = request_source == 9'h110;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
  wire        _excluded_client_T_1 = request_opcode == 3'h6;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:271:14]
  wire        req_needT = ~(request_opcode[2]) | request_opcode == 3'h5 & request_param == 3'h1 | (_excluded_client_T_1 | (&request_opcode)) & (|request_param);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:269:{5,12}, :270:{13,33,42,70}, :271:{14,42,52,80,89}]
  wire        req_acquire = _excluded_client_T_1 | (&request_opcode);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :219:53, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:271:{14,52}]
  wire        _final_meta_writeback_state_T_2 = request_param != 3'h3 & meta_state == 2'h2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17, :225:{55,64,78}]
  wire        _final_meta_writeback_clients_T_7 = evict_c & ~((request_param == 3'h1 | request_param == 3'h2 | request_param == 3'h5) & req_clientBit);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17, :226:{50,52,56}, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:270:13, :282:{11,43,66,75}, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
  wire        _GEN = (~meta_hit | ~probes_toN) & evict_c;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :151:23, :215:38, :229:21, :230:36, :232:{36,54}]
  wire [1:0]  _final_meta_writeback_state_T_6 = {1'h1, ~req_acquire};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :219:53, :238:40]
  wire [1:0]  _final_meta_writeback_state_T_7 = gotT ? _final_meta_writeback_state_T_6 : 2'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:148:17, :238:40, :239:55]
  wire [1:0]  _final_meta_writeback_state_T_9 = {1'h1, ~(~evict_c & req_acquire)};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :105:14, :219:53, :220:25, :244:{55,72}]
  wire [1:0]  _final_meta_writeback_state_T_13 = {meta_state == 2'h2, 1'h1};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :105:14, src/main/scala/chisel3/util/Mux.scala:77:13]
  wire        _final_meta_writeback_clients_T_14 = meta_hit & evict_c & ~probes_toN | req_acquire & req_clientBit;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :151:23, :219:53, :245:{40,66,84}, :246:40, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
  wire        _GEN_0 = request_prio_2 | request_control;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :215:38, :223:52, :228:53, :247:30]
  wire        _GEN_1 = request_prio_2 | ~request_control;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20, :105:14, :223:52, :227:34, :228:53, :234:30, :248:30]
  wire        _io_schedule_bits_dir_bits_data_WIRE_dirty = ~bad_grant & (request_prio_2 ? meta_dirty | request_opcode[0] : request_control ? ~meta_hit & meta_dirty : meta_hit & meta_dirty | ~(request_opcode[2]));	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17, :149:22, :215:38, :223:52, :224:{34,48,65}, :228:53, :229:21, :230:36, :236:{32,45,60,63}, :251:20, :252:21, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:269:12]
  wire [1:0]  _GEN_2 = {1'h0, meta_hit};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :100:17, :252:21, :257:36, :263:36]
  wire [1:0]  _io_schedule_bits_dir_bits_data_WIRE_state = bad_grant ? _GEN_2 : request_prio_2 ? (_final_meta_writeback_state_T_2 ? 2'h3 : meta_state) : request_control ? (meta_hit ? 2'h0 : meta_state) : req_needT ? _final_meta_writeback_state_T_6 : meta_hit ? ((&meta_state) ? _final_meta_writeback_state_T_9 : _final_meta_writeback_state_T_13) : _final_meta_writeback_state_T_7;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17, :149:22, :215:38, :223:52, :225:{34,40,64}, :228:53, :229:21, :231:36, :237:{32,38}, :238:40, :239:{40,55}, :244:55, :251:20, :252:21, :257:36, :263:36, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:270:70, src/main/scala/chisel3/util/Mux.scala:77:13]
  wire        _GEN_3 = meta_hit & evict_c & ~probes_toN;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :151:23, :252:21, :258:{36,54}, :264:36]
  wire        _io_schedule_bits_dir_bits_data_WIRE_clients = bad_grant ? _GEN_3 : request_prio_2 ? _final_meta_writeback_clients_T_7 : request_control ? _GEN : _final_meta_writeback_clients_T_14;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :149:22, :215:38, :223:52, :226:{34,50}, :228:53, :229:21, :232:36, :245:{34,84}, :251:20, :252:21, :258:36, :264:36]
  wire        excluded_client = meta_hit & request_prio_0 & (_excluded_client_T_1 | (&request_opcode) | request_opcode == 3'h4) & req_clientBit;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17, :279:28, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:271:{14,52}, :279:{77,87}, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
  wire        _new_meta_T = io_allocate_valid & io_allocate_bits_repeat;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:505:40]
  wire        new_meta_hit = _new_meta_T ? (bad_grant ? meta_hit : _GEN_1) : io_directory_bits_hit;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :149:22, :223:52, :227:34, :228:53, :251:20, :252:21, :505:{21,40}]
  wire        new_request_prio_2 = io_allocate_valid ? io_allocate_bits_prio_2 : request_prio_2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :506:24]
  wire        _GEN_4 = io_directory_valid | _new_meta_T;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:505:40, :539:28]
  `ifndef SYNTHESIS	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14]
    wire            _GEN_5 = meta_valid & ~(|meta_state) & ~reset;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:99:27, :100:17, :104:22, :105:14]
    wire            _GEN_6 = meta_state == 2'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :108:22]
    wire            _GEN_7 = meta_valid & meta_state == 2'h2 & ~reset;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:99:27, :100:17, :105:14, :111:22, :112:14]
    wire [3:0]      _GEN_8 = {2'h1, ~evict_c, ~meta_dirty};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :317:26, :319:32, :320:{26,32}]
    wire [3:0]      _GEN_9 = {3'h1, ~meta_dirty};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :317:26, :319:{26,32}]
    wire [3:0][3:0] _GEN_10 = {{_GEN_8}, {_GEN_9}, {{3'h0, ~evict_c}}, {{~(|meta_state), 3'h0}}};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :100:17, :104:22, :105:14, :314:26, :317:26, :318:{26,32}, :319:26, :320:26, :321:26]
    wire [3:0]      evict = meta_hit ? 4'h8 : _GEN_10[meta_state];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :317:26, :318:26, :319:26, :320:26, :321:26, :323:{17,23}]
    wire [3:0][3:0] _GEN_11 = {{_GEN_8}, {_GEN_9}, {{3'h0, ~evict_c}}, {{~(|meta_state), 3'h0}}};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :100:17, :104:22, :105:14, :314:26, :317:26, :318:{26,32}, :319:26, :320:26, :321:26]
    wire [3:0]      before_0 = meta_hit ? _GEN_11[meta_state] : 4'h8;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :317:26, :318:26, :319:26, :320:26, :321:26, :323:{17,23}]
    wire [3:0]      _GEN_12 = {2'h1, ~_io_schedule_bits_dir_bits_data_WIRE_clients, ~_io_schedule_bits_dir_bits_data_WIRE_dirty};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:223:52, :251:20, :252:21, :317:26, :319:32, :320:{26,32}]
    wire [3:0]      _GEN_13 = {3'h1, ~_io_schedule_bits_dir_bits_data_WIRE_dirty};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:223:52, :251:20, :252:21, :317:26, :319:{26,32}]
    wire [3:0][3:0] _GEN_14 = {{_GEN_12}, {_GEN_13}, {{3'h0, ~_io_schedule_bits_dir_bits_data_WIRE_clients}}, {{~(|_io_schedule_bits_dir_bits_data_WIRE_state), 3'h0}}};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :223:52, :251:20, :252:21, :314:26, :317:26, :318:{26,32}, :319:26, :320:26, :321:26]
    wire [3:0]      after = _GEN_14[_io_schedule_bits_dir_bits_data_WIRE_state];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:223:52, :251:20, :252:21, :317:26, :318:26, :319:26, :320:26]
    wire            _GEN_15 = ~s_release & w_rprobeackfirst & io_schedule_ready & ~reset;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :122:33, :124:33, :186:32, :364:13]
    wire            _GEN_16 = before_0 == 4'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :323:{17,23}, :364:13]
    wire            _GEN_17 = before_0 == 4'h0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:314:26, :317:26, :321:26, :323:{17,23}, :365:13]
    wire            _GEN_18 = before_0 == 4'h8;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :321:26, :323:{17,23}, :375:15]
    wire            _GEN_19 = after == 4'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :318:26, :364:13, :375:15]
    wire            _GEN_20 = ~s_writeback & no_wait & io_schedule_ready & ~reset;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :139:33, :183:83, :190:70, :375:15]
    wire            _GEN_21 = after == 4'h0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:314:26, :317:26, :318:26, :321:26, :376:15]
    wire            _GEN_22 = after == 4'h7;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :318:26, :377:15]
    wire            _GEN_23 = after == 4'h5;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :318:26, :378:15]
    wire            _GEN_24 = after == 4'h4;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :318:26, :379:15]
    wire            _GEN_25 = after == 4'h6;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :318:26, :380:15]
    wire            _GEN_26 = after == 4'h3;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :318:26, :381:15]
    wire            _GEN_27 = after == 4'h2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :318:26, :382:15]
    wire            _GEN_28 = after == 4'h8;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :318:26, :321:26, :384:15]
    wire            _GEN_29 = before_0 == 4'h7;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :323:{17,23}, :377:15, :402:15]
    wire            _GEN_30 = before_0 == 4'h5;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :323:{17,23}, :378:15, :411:15]
    wire            _GEN_31 = before_0 == 4'h6;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :323:{17,23}, :380:15, :420:15]
    wire            _GEN_32 = before_0 == 4'h4;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :323:{17,23}, :379:15, :429:15]
    wire            _GEN_33 = before_0 == 4'h3;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :323:{17,23}, :381:15, :438:15]
    wire            _GEN_34 = before_0 == 4'h2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :323:{17,23}, :382:15, :447:15]
    wire [3:0][3:0] _GEN_35 = {{_GEN_12}, {_GEN_13}, {{3'h0, ~_io_schedule_bits_dir_bits_data_WIRE_clients}}, {{~(|_io_schedule_bits_dir_bits_data_WIRE_state), 3'h0}}};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :223:52, :251:20, :252:21, :314:26, :317:26, :318:{26,32}, :319:26, :320:26, :321:26]
    wire [3:0]      prior = _GEN_35[_io_schedule_bits_dir_bits_data_WIRE_state];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:223:52, :251:20, :252:21, :317:26, :318:26, :319:26, :320:26]
    wire            _GEN_36 = _new_meta_T & ~reset;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :505:40, :522:11]
    always @(posedge clock) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14]
      if (_GEN_5 & evict_c) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :105:14]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14]
          $error("Assertion failed\n    at MSHR.scala:105 assert (!meta.clients.orR)\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14]
      end
      if (_GEN_5 & meta_dirty) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :105:14, :106:14]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:106:14]
          $error("Assertion failed\n    at MSHR.scala:106 assert (!meta.dirty)\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:106:14]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:106:14]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:106:14]
      end
      if (meta_valid & _GEN_6 & ~reset & meta_dirty) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:99:27, :100:17, :105:14, :108:22, :109:14]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:109:14]
          $error("Assertion failed\n    at MSHR.scala:109 assert (!meta.dirty)\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:109:14]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:109:14]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:109:14]
      end
      if (_GEN_7 & ~evict_c) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :112:14]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:112:14]
          $error("Assertion failed\n    at MSHR.scala:112 assert (meta.clients.orR)\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:112:14]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:112:14]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:112:14]
      end
      if (_GEN_7 & evict_c & evict_c - 1'h1) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :112:14, :113:{14,45}]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:113:14]
          $error("Assertion failed\n    at MSHR.scala:113 assert ((meta.clients & (meta.clients - 1.U)) === 0.U) // at most one\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:113:14]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:113:14]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:113:14]
      end
      if (~reset & ~(~(meta_valid & w_releaseack & w_rprobeacklast & w_pprobeacklast & ~w_grantfirst) | ~(~meta_valid | (~w_releaseack | ~w_rprobeacklast | ~w_pprobeacklast) & ~w_grantfirst))) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:99:27, :105:14, :123:33, :125:33, :129:33, :133:33, :168:{28,40,45,62,79,82,100,103}, :169:93, :179:{10,11,33,36}]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:179:10]
          $error("Assertion failed\n    at MSHR.scala:179 assert (!io.status.bits.nestB || !io.status.bits.blockB)\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:179:10]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:179:10]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:179:10]
      end
      if (~reset & ~(~_io_status_bits_nestC_output | meta_valid)) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:99:27, :105:14, :173:39, :180:{10,11,33}]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:180:10]
          $error("Assertion failed\n    at MSHR.scala:180 assert (!io.status.bits.nestC || !io.status.bits.blockC)\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:180:10]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:180:10]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:180:10]
      end
      if (bad_grant & meta_hit & ~reset & ~(~meta_valid | _GEN_6)) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:99:27, :100:17, :105:14, :108:22, :149:22, :168:28, :254:{14,27}]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:254:14]
          $error("Assertion failed\n    at MSHR.scala:254 assert (!meta_valid || meta.state === BRANCH)\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:254:14]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:254:14]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:254:14]
      end
      if (_GEN_15 & evict == 4'h1) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :323:{17,23}, :364:13]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13]
          $error("Assertion failed: State transition from S_BRANCH to evicted should be impossible (false,true,true,false,true)\n    at MSHR.scala:346 assert(!(evict === from.code), cf\"State transition from ${from} to evicted should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13]
      end
      if (_GEN_15 & _GEN_16) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13]
          $error("Assertion failed: State transition from S_BRANCH to flushed should be impossible (false,true,true,false,true)\n    at MSHR.scala:351 assert(!(before === from.code), cf\"State transition from ${from} to flushed should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13]
      end
      if (_GEN_15 & evict == 4'h0) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:314:26, :317:26, :321:26, :323:{17,23}, :364:13, :365:13]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13]
          $error("Assertion failed: State transition from S_BRANCH_C to evicted should be impossible (false,true,true,false,true)\n    at MSHR.scala:346 assert(!(evict === from.code), cf\"State transition from ${from} to evicted should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13]
      end
      if (_GEN_15 & _GEN_17) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13, :365:13]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13]
          $error("Assertion failed: State transition from S_BRANCH_C to flushed should be impossible (false,true,true,false,true)\n    at MSHR.scala:351 assert(!(before === from.code), cf\"State transition from ${from} to flushed should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13]
      end
      if (_GEN_20 & _GEN_18 & _GEN_19) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15]
          $error("Assertion failed: State transition from S_INVALID to S_BRANCH should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15]
      end
      if (_GEN_20 & _GEN_18 & _GEN_21) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :376:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:376:15]
          $error("Assertion failed: State transition from S_INVALID to S_BRANCH_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:376:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:376:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:376:15]
      end
      if (_GEN_20 & _GEN_18 & _GEN_23) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :378:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:378:15]
          $error("Assertion failed: State transition from S_INVALID to S_TIP_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:378:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:378:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:378:15]
      end
      if (_GEN_20 & _GEN_18 & _GEN_24) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :379:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:379:15]
          $error("Assertion failed: State transition from S_INVALID to S_TIP_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:379:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:379:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:379:15]
      end
      if (_GEN_20 & _GEN_18 & _GEN_27) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :382:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:382:15]
          $error("Assertion failed: State transition from S_INVALID to S_TRUNK_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:382:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:382:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:382:15]
      end
      if (_GEN_20 & _GEN_16 & _GEN_28) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13, :375:15, :384:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:384:15]
          $error("Assertion failed: State transition from S_BRANCH to S_INVALID should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:384:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:384:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:384:15]
      end
      if (_GEN_20 & _GEN_16 & _GEN_21) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13, :375:15, :376:15, :385:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:385:15]
          $error("Assertion failed: State transition from S_BRANCH to S_BRANCH_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:385:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:385:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:385:15]
      end
      if (_GEN_20 & _GEN_16 & _GEN_22) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13, :375:15, :377:15, :386:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:386:15]
          $error("Assertion failed: State transition from S_BRANCH to S_TIP should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:386:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:386:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:386:15]
      end
      if (_GEN_20 & _GEN_16 & _GEN_23) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13, :375:15, :378:15, :387:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:387:15]
          $error("Assertion failed: State transition from S_BRANCH to S_TIP_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:387:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:387:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:387:15]
      end
      if (_GEN_20 & _GEN_16 & _GEN_24) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13, :375:15, :379:15, :388:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:388:15]
          $error("Assertion failed: State transition from S_BRANCH to S_TIP_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:388:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:388:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:388:15]
      end
      if (_GEN_20 & _GEN_16 & _GEN_25) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13, :375:15, :380:15, :389:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:389:15]
          $error("Assertion failed: State transition from S_BRANCH to S_TIP_D should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:389:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:389:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:389:15]
      end
      if (_GEN_20 & _GEN_16 & _GEN_26) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13, :375:15, :381:15, :390:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:390:15]
          $error("Assertion failed: State transition from S_BRANCH to S_TRUNK_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:390:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:390:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:390:15]
      end
      if (_GEN_20 & _GEN_16 & _GEN_27) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:364:13, :375:15, :382:15, :391:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:391:15]
          $error("Assertion failed: State transition from S_BRANCH to S_TRUNK_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:391:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:391:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:391:15]
      end
      if (_GEN_20 & _GEN_17 & _GEN_28) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13, :375:15, :384:15, :393:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:393:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_INVALID should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:393:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:393:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:393:15]
      end
      if (_GEN_20 & _GEN_17 & _GEN_19) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13, :375:15, :394:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:394:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_BRANCH should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:394:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:394:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:394:15]
      end
      if (_GEN_20 & _GEN_17 & _GEN_22) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13, :375:15, :377:15, :395:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:395:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_TIP should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:395:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:395:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:395:15]
      end
      if (_GEN_20 & _GEN_17 & _GEN_23) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13, :375:15, :378:15, :396:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:396:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_TIP_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:396:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:396:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:396:15]
      end
      if (_GEN_20 & _GEN_17 & _GEN_25) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13, :375:15, :380:15, :397:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:397:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_TIP_D should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:397:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:397:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:397:15]
      end
      if (_GEN_20 & _GEN_17 & _GEN_24) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13, :375:15, :379:15, :398:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:398:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_TIP_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:398:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:398:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:398:15]
      end
      if (_GEN_20 & _GEN_17 & _GEN_26) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13, :375:15, :381:15, :399:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:399:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_TRUNK_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:399:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:399:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:399:15]
      end
      if (_GEN_20 & _GEN_17 & _GEN_27) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:365:13, :375:15, :382:15, :400:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:400:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_TRUNK_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:400:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:400:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:400:15]
      end
      if (_GEN_20 & _GEN_29 & _GEN_28) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :384:15, :402:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:402:15]
          $error("Assertion failed: State transition from S_TIP to S_INVALID should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:402:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:402:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:402:15]
      end
      if (_GEN_20 & _GEN_29 & _GEN_19) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :402:15, :403:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:403:15]
          $error("Assertion failed: State transition from S_TIP to S_BRANCH should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:403:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:403:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:403:15]
      end
      if (_GEN_20 & _GEN_29 & _GEN_21) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :376:15, :402:15, :404:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:404:15]
          $error("Assertion failed: State transition from S_TIP to S_BRANCH_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:404:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:404:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:404:15]
      end
      if (_GEN_20 & _GEN_29 & _GEN_23) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :378:15, :402:15, :405:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:405:15]
          $error("Assertion failed: State transition from S_TIP to S_TIP_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:405:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:405:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:405:15]
      end
      if (_GEN_20 & _GEN_29 & _GEN_24) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :379:15, :402:15, :407:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:407:15]
          $error("Assertion failed: State transition from S_TIP to S_TIP_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:407:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:407:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:407:15]
      end
      if (_GEN_20 & _GEN_29 & _GEN_27) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :382:15, :402:15, :409:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:409:15]
          $error("Assertion failed: State transition from S_TIP to S_TRUNK_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:409:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:409:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:409:15]
      end
      if (_GEN_20 & _GEN_30 & _GEN_28) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :384:15, :411:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:411:15]
          $error("Assertion failed: State transition from S_TIP_C to S_INVALID should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:411:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:411:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:411:15]
      end
      if (_GEN_20 & _GEN_30 & _GEN_19) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :411:15, :412:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:412:15]
          $error("Assertion failed: State transition from S_TIP_C to S_BRANCH should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:412:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:412:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:412:15]
      end
      if (_GEN_20 & _GEN_30 & _GEN_21) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :376:15, :411:15, :413:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:413:15]
          $error("Assertion failed: State transition from S_TIP_C to S_BRANCH_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:413:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:413:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:413:15]
      end
      if (_GEN_20 & _GEN_30 & _GEN_24) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :379:15, :411:15, :416:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:416:15]
          $error("Assertion failed: State transition from S_TIP_C to S_TIP_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:416:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:416:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:416:15]
      end
      if (_GEN_20 & _GEN_30 & _GEN_27) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :382:15, :411:15, :418:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:418:15]
          $error("Assertion failed: State transition from S_TIP_C to S_TRUNK_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:418:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:418:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:418:15]
      end
      if (_GEN_20 & _GEN_31 & _GEN_28) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :384:15, :420:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:420:15]
          $error("Assertion failed: State transition from S_TIP_D to S_INVALID should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:420:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:420:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:420:15]
      end
      if (_GEN_20 & _GEN_31 & _GEN_19) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :420:15, :421:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:421:15]
          $error("Assertion failed: State transition from S_TIP_D to S_BRANCH should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:421:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:421:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:421:15]
      end
      if (_GEN_20 & _GEN_31 & _GEN_21) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :376:15, :420:15, :422:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:422:15]
          $error("Assertion failed: State transition from S_TIP_D to S_BRANCH_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:422:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:422:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:422:15]
      end
      if (_GEN_20 & _GEN_31 & _GEN_22) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :377:15, :420:15, :423:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:423:15]
          $error("Assertion failed: State transition from S_TIP_D to S_TIP should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:423:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:423:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:423:15]
      end
      if (_GEN_20 & _GEN_31 & _GEN_23) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :378:15, :420:15, :424:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:424:15]
          $error("Assertion failed: State transition from S_TIP_D to S_TIP_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:424:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:424:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:424:15]
      end
      if (_GEN_20 & _GEN_31 & _GEN_24) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :379:15, :420:15, :425:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:425:15]
          $error("Assertion failed: State transition from S_TIP_D to S_TIP_CD should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:425:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:425:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:425:15]
      end
      if (_GEN_20 & _GEN_31 & _GEN_26) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :381:15, :420:15, :426:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:426:15]
          $error("Assertion failed: State transition from S_TIP_D to S_TRUNK_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:426:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:426:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:426:15]
      end
      if (_GEN_20 & _GEN_32 & _GEN_28) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :384:15, :429:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:429:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_INVALID should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:429:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:429:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:429:15]
      end
      if (_GEN_20 & _GEN_32 & _GEN_19) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :429:15, :430:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:430:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_BRANCH should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:430:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:430:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:430:15]
      end
      if (_GEN_20 & _GEN_32 & _GEN_21) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :376:15, :429:15, :431:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:431:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_BRANCH_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:431:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:431:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:431:15]
      end
      if (_GEN_20 & _GEN_32 & _GEN_22) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :377:15, :429:15, :432:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:432:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_TIP should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:432:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:432:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:432:15]
      end
      if (_GEN_20 & _GEN_32 & _GEN_23) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :378:15, :429:15, :433:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:433:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_TIP_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:433:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:433:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:433:15]
      end
      if (_GEN_20 & _GEN_32 & _GEN_26) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :381:15, :429:15, :435:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:435:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_TRUNK_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:435:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:435:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:435:15]
      end
      if (_GEN_20 & _GEN_33 & _GEN_28) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :384:15, :438:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:438:15]
          $error("Assertion failed: State transition from S_TRUNK_C to S_INVALID should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:438:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:438:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:438:15]
      end
      if (_GEN_20 & _GEN_33 & _GEN_19) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :438:15, :439:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:439:15]
          $error("Assertion failed: State transition from S_TRUNK_C to S_BRANCH should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:439:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:439:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:439:15]
      end
      if (_GEN_20 & _GEN_33 & _GEN_21) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :376:15, :438:15, :440:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:440:15]
          $error("Assertion failed: State transition from S_TRUNK_C to S_BRANCH_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:440:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:440:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:440:15]
      end
      if (_GEN_20 & _GEN_34 & _GEN_28) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :384:15, :447:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:447:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_INVALID should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:447:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:447:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:447:15]
      end
      if (_GEN_20 & _GEN_34 & _GEN_19) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :447:15, :448:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:448:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_BRANCH should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:448:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:448:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:448:15]
      end
      if (_GEN_20 & _GEN_34 & _GEN_21) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :376:15, :447:15, :449:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:449:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_BRANCH_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:449:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:449:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:449:15]
      end
      if (_GEN_20 & _GEN_34 & _GEN_22) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :377:15, :447:15, :450:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:450:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_TIP should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:450:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:450:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:450:15]
      end
      if (_GEN_20 & _GEN_34 & _GEN_23) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :378:15, :447:15, :451:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:451:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_TIP_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:451:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:451:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:451:15]
      end
      if (_GEN_20 & _GEN_34 & _GEN_26) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:375:15, :381:15, :447:15, :454:15]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:454:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_TRUNK_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:359 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:454:15]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:454:15]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:454:15]
      end
      if (_GEN_36 & prior == 4'h1) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:317:26, :318:26, :364:13, :522:11]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:522:11]
          $error("Assertion failed: State bypass from S_BRANCH should be impossible (false,true,true,false,true)\n    at MSHR.scala:516 assert(!(prior === from.code), cf\"State bypass from ${from} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:522:11]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:522:11]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:522:11]
      end
      if (_GEN_36 & prior == 4'h0) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:314:26, :317:26, :318:26, :321:26, :522:11, :523:11]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:523:11]
          $error("Assertion failed: State bypass from S_BRANCH_C should be impossible (false,true,true,false,true)\n    at MSHR.scala:516 assert(!(prior === from.code), cf\"State bypass from ${from} should be impossible ${cfg}\")\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:523:11]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:523:11]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:523:11]
      end
      if (io_allocate_valid & ~reset & ~(~request_valid | no_wait & io_schedule_ready & _io_schedule_valid_output)) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :183:83, :193:105, :533:{12,13,28,40}]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:533:12]
          $error("Assertion failed\n    at MSHR.scala:533 assert (!request_valid || (no_wait && io.schedule.fire))\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:533:12]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:533:12]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:533:12]
      end
      if (_GEN_4 & new_request_prio_2 & ~reset & ~new_meta_hit) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :505:21, :506:24, :539:28, :585:14]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:585:14]
          $error("Assertion failed\n    at MSHR.scala:585 assert (new_meta.hit)\n");	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:585:14]
        if (`STOP_COND_)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:585:14]
          $fatal;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:585:14]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        new_meta_dirty = _new_meta_T ? _io_schedule_bits_dir_bits_data_WIRE_dirty : io_directory_bits_dirty;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:223:52, :251:20, :252:21, :505:{21,40}]
  wire [1:0]  new_meta_state = _new_meta_T ? _io_schedule_bits_dir_bits_data_WIRE_state : io_directory_bits_state;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:223:52, :251:20, :252:21, :505:{21,40}]
  wire        new_meta_clients = _new_meta_T ? _io_schedule_bits_dir_bits_data_WIRE_clients : io_directory_bits_clients;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:223:52, :251:20, :252:21, :505:{21,40}]
  wire        new_request_control = io_allocate_valid ? io_allocate_bits_control : request_control;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :506:24]
  wire [2:0]  new_request_opcode = io_allocate_valid ? io_allocate_bits_opcode : request_opcode;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :506:24]
  wire [2:0]  new_request_param = io_allocate_valid ? io_allocate_bits_param : request_param;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :506:24]
  wire        _new_skipProbe_T = new_request_opcode == 3'h6;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:506:24, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:271:14]
  wire        new_needT = ~(new_request_opcode[2]) | new_request_opcode == 3'h5 & new_request_param == 3'h1 | (_new_skipProbe_T | (&new_request_opcode)) & (|new_request_param);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:506:24, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:269:{5,12}, :270:{13,33,42,70}, :271:{14,42,52,80,89}]
  wire        new_clientBit = (io_allocate_valid ? io_allocate_bits_source : request_source) == 9'h110;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :506:24, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
  wire        _GEN_37 = new_meta_state == 2'h2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:505:21, :578:56]
  wire        _GEN_38 = ~new_meta_hit & (|new_meta_state);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:505:21, :585:14, :606:{27,45}]
  wire        _GEN_39 = new_request_prio_2 | (new_request_control ? ~new_meta_hit : ~_GEN_38);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :505:21, :506:24, :553:22, :571:58, :585:14, :588:57, :591:27, :606:{27,58}, :607:19]
  wire        _GEN_40 = new_request_prio_2 | (new_request_control ? ~new_meta_hit | ~new_meta_clients : ~_GEN_38 | ~new_meta_clients);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :505:21, :506:24, :550:22, :571:58, :588:57, :591:27, :595:69, :596:20, :606:{27,58}, :610:68]
  wire        _GEN_41 = ~new_meta_hit | new_meta_state == 2'h1 & new_needT;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:505:21, :585:14, :617:{27,46,57}, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:270:70]
  wire        _GEN_42 = new_request_prio_2 | new_request_control;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:506:24, :556:22, :571:58, :588:57, :617:72]
  wire        _GEN_43 = _GEN_42 | ~_GEN_41;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :556:22, :571:58, :588:57, :617:{27,72}, :618:19]
  wire        _GEN_44 = new_meta_hit & (new_needT | _GEN_37) & new_meta_clients & ~((_new_skipProbe_T | (&new_request_opcode) | new_request_opcode == 3'h4) & new_clientBit);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:505:21, :506:24, :509:26, :578:56, :627:{24,53}, :628:33, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:270:70, :271:{14,52}, :279:{77,87}, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
  wire        _GEN_45 = _GEN_42 | ~_GEN_44;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :555:22, :556:22, :571:58, :588:57, :617:72, :627:53, :628:59, :629:18]
  wire        _GEN_46 = _new_skipProbe_T | (&new_request_opcode);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:506:24, :636:49, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:271:{14,52}]
  wire        _GEN_47 = io_schedule_ready & no_wait;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:139:33, :183:83, :197:28, :206:{35,50}]
  wire        _GEN_48 = meta_valid & (|meta_state) & io_nestedwb_set == request_set & io_nestedwb_tag == meta_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :99:27, :100:17, :104:22, :156:{25,41,60}]
  wire        probe_bit = io_sinkc_bits_source == 9'h110;	// @[generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
  wire        _GEN_49 = io_sinkd_bits_opcode == 3'h4 | io_sinkd_bits_opcode == 3'h5;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:483:{32,42,66}, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:270:13]
  wire        _GEN_50 = io_sinkd_valid & _GEN_49;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:147:17, :482:25, :483:{42,81}, :484:12]
  wire        last_probe = (probes_done | probe_bit) == (evict_c & ~excluded_client);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :150:24, :279:28, :289:53, :459:{33,46,64}, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
  wire        _GEN_51 = io_sinkc_valid & last_probe;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:122:33, :459:46, :461:49, :470:22]
  wire        _GEN_52 = io_sinkc_valid & last_probe & io_sinkc_bits_last;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:123:33, :459:46, :461:49, :471:21]
  always @(posedge clock) begin
    if (reset) begin
      request_valid <= 1'h0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30]
      meta_valid <= 1'h0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :99:27]
      s_rprobe <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :121:33]
      w_rprobeackfirst <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :122:33]
      w_rprobeacklast <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :123:33]
      s_release <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :124:33]
      w_releaseack <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :125:33]
      s_pprobe <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :126:33]
      s_acquire <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :127:33]
      s_flush <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :128:33]
      w_grantfirst <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :129:33]
      w_grantlast <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :130:33]
      w_grant <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :131:33]
      w_pprobeackfirst <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :132:33]
      w_pprobeacklast <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :133:33]
      w_pprobeack <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :134:33]
      s_grantack <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :136:33]
      s_execute <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :137:33]
      w_grantack <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :138:33]
      s_writeback <= 1'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:105:14, :139:33]
    end
    else begin
      request_valid <= io_allocate_valid | ~_GEN_47 & request_valid;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :139:33, :197:28, :206:{35,50}, :208:20, :209:21, :532:28, :534:19]
      meta_valid <= _GEN_4 | ~_GEN_47 & meta_valid;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :99:27, :139:33, :197:28, :206:{35,50}, :208:20, :209:21, :210:18, :539:{28,79}, :540:16]
      if (_GEN_4) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:539:28]
        s_rprobe <= _GEN_40;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:121:33, :550:22, :571:58, :588:57]
        w_rprobeackfirst <= _GEN_40;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:122:33, :550:22, :571:58, :588:57]
        w_rprobeacklast <= _GEN_40;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:123:33, :550:22, :571:58, :588:57]
        s_release <= _GEN_39;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:124:33, :553:22, :571:58, :588:57]
        w_releaseack <= _GEN_39;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:125:33, :553:22, :571:58, :588:57]
        s_pprobe <= _GEN_45;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:126:33, :555:22, :571:58, :588:57, :628:59]
        s_acquire <= _GEN_43;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:127:33, :556:22, :571:58, :588:57, :617:72]
        s_flush <= new_request_prio_2 | ~new_request_control;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :128:33, :506:24, :557:22, :571:58, :588:57, :589:15]
        w_grantfirst <= _GEN_43;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:129:33, :556:22, :571:58, :588:57, :617:72]
        w_grantlast <= _GEN_43;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:130:33, :556:22, :571:58, :588:57, :617:72]
        w_grant <= _GEN_43;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:131:33, :556:22, :571:58, :588:57, :617:72]
        w_pprobeackfirst <= _GEN_45;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:132:33, :555:22, :571:58, :588:57, :628:59]
        w_pprobeacklast <= _GEN_45;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:133:33, :555:22, :571:58, :588:57, :628:59]
        w_pprobeack <= _GEN_45;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:134:33, :555:22, :571:58, :588:57, :628:59]
        s_grantack <= _GEN_43;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33, :556:22, :571:58, :588:57, :617:72]
        s_execute <= ~new_request_prio_2 & new_request_control;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:137:33, :506:24, :571:58, :572:17, :588:57]
        w_grantack <= _GEN_42 | ~_GEN_46;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :138:33, :556:22, :567:22, :571:58, :588:57, :617:72, :636:{49,88}, :637:20]
        s_writeback <= new_request_prio_2 ? ~((new_request_param == 3'h1 | new_request_param == 3'h2 | new_request_param == 3'h5) & new_meta_clients & new_clientBit | (new_request_param == 3'h0 | new_request_param == 3'h4) & _GEN_37) & ~(new_request_opcode[0] & ~new_meta_dirty) : new_request_control | ~(~(new_request_opcode[2]) & new_meta_hit & ~new_meta_dirty | _GEN_46 | _GEN_44) & ~_GEN_41;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :105:14, :139:33, :505:21, :506:24, :556:22, :568:22, :571:58, :574:{31,35,38,55}, :575:21, :578:{38,56,67}, :579:21, :582:{38,85}, :583:21, :588:57, :617:{27,72}, :618:19, :627:53, :628:59, :633:21, :636:{49,88}, :638:21, :641:{13,52,72}, :642:21, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:269:12, :270:13, :282:{11,43,66,75}, :285:{11,34,43}, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
      end
      else begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:539:28]
        s_rprobe <= io_schedule_ready | s_rprobe;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:121:33, :197:28, :198:50]
        w_rprobeackfirst <= _GEN_51 | w_rprobeackfirst;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:122:33, :461:49, :470:22]
        w_rprobeacklast <= _GEN_52 | w_rprobeacklast;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:123:33, :461:49, :471:21]
        s_release <= io_schedule_ready & w_rprobeackfirst | s_release;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:122:33, :124:33, :197:28, :199:{35,50}]
        w_releaseack <= io_sinkd_valid & ~_GEN_49 & io_sinkd_bits_opcode == 3'h6 | w_releaseack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:125:33, :482:25, :483:{42,81}, :495:{37,53}, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:271:14]
        s_pprobe <= io_schedule_ready | s_pprobe;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:126:33, :197:28, :200:50]
        s_acquire <= io_schedule_ready & s_release & s_pprobe | s_acquire;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:124:33, :126:33, :127:33, :197:28, :201:{35,50}]
        s_flush <= io_schedule_ready & w_releaseack | s_flush;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:125:33, :128:33, :197:28, :202:{35,50}]
        w_grantfirst <= _GEN_50 | w_grantfirst;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:129:33, :147:17, :482:25, :483:81, :484:12, :485:20]
        if (_GEN_50) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:147:17, :482:25, :483:81, :484:12]
          w_grantlast <= io_sinkd_bits_last;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:130:33]
          w_grant <= ~(|request_offset) | io_sinkd_bits_last;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :131:33, :475:77, :490:{33,41}]
        end
        w_pprobeackfirst <= _GEN_51 | w_pprobeackfirst;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:122:33, :132:33, :461:49, :470:22, :472:22]
        w_pprobeacklast <= _GEN_52 | w_pprobeacklast;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:123:33, :133:33, :461:49, :471:21, :473:21]
        w_pprobeack <= io_sinkc_valid & last_probe & (io_sinkc_bits_last | ~(|request_offset)) | w_pprobeack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :134:33, :459:46, :461:49, :475:{59,77}, :476:17]
        s_grantack <= io_schedule_ready & w_grantfirst | s_grantack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:129:33, :136:33, :197:28, :204:{35,50}]
        s_execute <= io_schedule_ready & w_pprobeack & w_grant | s_execute;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:131:33, :134:33, :137:33, :197:28, :205:{35,50}]
        w_grantack <= io_sinke_valid | w_grantack;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:138:33, :499:25, :500:16]
        s_writeback <= _GEN_47 | s_writeback;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:139:33, :197:28, :206:{35,50}]
      end
    end
    if (io_allocate_valid) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:86:14]
      request_prio_0 <= io_allocate_bits_prio_0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_prio_1 <= io_allocate_bits_prio_1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_prio_2 <= io_allocate_bits_prio_2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_control <= io_allocate_bits_control;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_opcode <= io_allocate_bits_opcode;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_param <= io_allocate_bits_param;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_size <= io_allocate_bits_size;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_source <= io_allocate_bits_source;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_tag <= io_allocate_bits_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_offset <= io_allocate_bits_offset;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_put <= io_allocate_bits_put;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
      request_set <= io_allocate_bits_set;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
    end
    if (_GEN_4) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:539:28]
      if (_new_meta_T) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:505:40]
        meta_dirty <= _io_schedule_bits_dir_bits_data_WIRE_dirty;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :223:52, :251:20, :252:21]
        if (bad_grant) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:149:22]
          meta_state <= _GEN_2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :252:21, :257:36, :263:36]
          evict_c <= _GEN_3;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :252:21, :258:36, :264:36]
        end
        else begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:149:22]
          if (request_prio_2) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
            if (_final_meta_writeback_state_T_2)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:225:64]
              meta_state <= 2'h3;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
            evict_c <= _final_meta_writeback_clients_T_7;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :226:50]
          end
          else if (request_control) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
            if (meta_hit)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
              meta_state <= 2'h0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
            evict_c <= _GEN;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :215:38, :229:21, :232:36]
          end
          else begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
            if (req_needT)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:270:70]
              meta_state <= _final_meta_writeback_state_T_6;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :238:40]
            else if (meta_hit) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
              if (&meta_state)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, src/main/scala/chisel3/util/Mux.scala:77:13]
                meta_state <= _final_meta_writeback_state_T_9;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :244:55]
              else	// @[src/main/scala/chisel3/util/Mux.scala:77:13]
                meta_state <= _final_meta_writeback_state_T_13;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, src/main/scala/chisel3/util/Mux.scala:77:13]
            end
            else	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
              meta_state <= _final_meta_writeback_state_T_7;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :239:55]
            evict_c <= _final_meta_writeback_clients_T_14;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :245:84]
          end
          meta_hit <= _GEN_1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :223:52, :227:34, :228:53]
        end
        if (~_GEN_0)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:215:38, :223:52, :228:53, :247:30]
          meta_tag <= request_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17]
      end
      else begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:505:40]
        meta_dirty <= io_directory_bits_dirty;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
        meta_state <= io_directory_bits_state;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
        evict_c <= io_directory_bits_clients;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
        meta_tag <= io_directory_bits_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
        meta_hit <= io_directory_bits_hit;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
      end
    end
    else begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:539:28]
      meta_dirty <= io_sinkc_valid & (|meta_state) & io_sinkc_bits_tag == meta_tag & io_sinkc_bits_data | (_GEN_48 ? io_nestedwb_c_set_dirty | ~io_nestedwb_b_clr_dirty & meta_dirty : meta_dirty);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :104:22, :156:{41,74}, :157:{36,49}, :158:{36,49}, :461:49, :480:{55,91,104}]
      if (_GEN_48 & io_nestedwb_b_toB)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :156:{41,74}, :159:{30,43}]
        meta_state <= 2'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
      meta_hit <= ~(_GEN_48 & io_nestedwb_b_toN) & meta_hit;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :156:{41,74}, :160:{30,41}]
    end
    if (~_GEN_4 | _new_meta_T) begin	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :505:40, :539:{28,79}, :541:10]
    end
    else	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :539:79, :541:10]
      meta_way <= io_directory_bits_way;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
    if (_GEN_50)	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:147:17, :482:25, :483:81, :484:12]
      sink <= io_sinkd_bits_sink;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:147:17]
    gotT <= ~_GEN_4 & (_GEN_50 ? io_sinkd_bits_param == 3'h0 : gotT);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :147:17, :148:17, :482:25, :483:81, :484:12, :493:{12,35}, :539:{28,79}, :541:10, :545:10]
    bad_grant <= ~_GEN_4 & (_GEN_50 ? io_sinkd_bits_denied : bad_grant);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :147:17, :149:22, :482:25, :483:81, :484:12, :488:17, :539:{28,79}, :541:10, :546:15]
    probes_done <= ~_GEN_4 & (io_sinkc_valid & probe_bit | probes_done);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :150:24, :461:49, :467:17, :539:{28,79}, :541:10, :542:17, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
    probes_toN <= ~_GEN_4 & (io_sinkc_valid & (io_sinkc_bits_param == 3'h1 | io_sinkc_bits_param == 3'h2 | io_sinkc_bits_param == 3'h5) & probe_bit | probes_toN);	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :151:23, :461:49, :468:16, :539:{28,79}, :541:10, :543:16, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:270:13, :282:{11,43,66,75}, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;
        end
        request_valid = _RANDOM[2'h0][0];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30]
        request_prio_0 = _RANDOM[2'h0][1];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20]
        request_prio_1 = _RANDOM[2'h0][2];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20]
        request_prio_2 = _RANDOM[2'h0][3];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20]
        request_control = _RANDOM[2'h0][4];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20]
        request_opcode = _RANDOM[2'h0][7:5];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20]
        request_param = _RANDOM[2'h0][10:8];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20]
        request_size = _RANDOM[2'h0][13:11];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20]
        request_source = _RANDOM[2'h0][22:14];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20]
        request_tag = {_RANDOM[2'h0][31:23], _RANDOM[2'h1][6:0]};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20]
        request_offset = _RANDOM[2'h1][12:7];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
        request_put = _RANDOM[2'h1][17:13];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
        request_set = _RANDOM[2'h1][24:18];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
        meta_valid = _RANDOM[2'h1][25];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :99:27]
        meta_dirty = _RANDOM[2'h1][26];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17]
        meta_state = _RANDOM[2'h1][28:27];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17]
        evict_c = _RANDOM[2'h1][29];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17]
        meta_tag = {_RANDOM[2'h1][31:30], _RANDOM[2'h2][13:0]};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17]
        meta_hit = _RANDOM[2'h2][14];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
        meta_way = _RANDOM[2'h2][16:15];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
        s_rprobe = _RANDOM[2'h2][17];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :121:33]
        w_rprobeackfirst = _RANDOM[2'h2][18];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :122:33]
        w_rprobeacklast = _RANDOM[2'h2][19];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :123:33]
        s_release = _RANDOM[2'h2][20];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :124:33]
        w_releaseack = _RANDOM[2'h2][21];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :125:33]
        s_pprobe = _RANDOM[2'h2][22];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :126:33]
        s_acquire = _RANDOM[2'h2][23];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :127:33]
        s_flush = _RANDOM[2'h2][24];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :128:33]
        w_grantfirst = _RANDOM[2'h2][25];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :129:33]
        w_grantlast = _RANDOM[2'h2][26];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :130:33]
        w_grant = _RANDOM[2'h2][27];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :131:33]
        w_pprobeackfirst = _RANDOM[2'h2][28];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :132:33]
        w_pprobeacklast = _RANDOM[2'h2][29];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :133:33]
        w_pprobeack = _RANDOM[2'h2][30];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :134:33]
        s_grantack = _RANDOM[2'h3][0];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33]
        s_execute = _RANDOM[2'h3][1];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33, :137:33]
        w_grantack = _RANDOM[2'h3][2];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33, :138:33]
        s_writeback = _RANDOM[2'h3][3];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33, :139:33]
        sink = _RANDOM[2'h3][6:4];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33, :147:17]
        gotT = _RANDOM[2'h3][7];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33, :148:17]
        bad_grant = _RANDOM[2'h3][8];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33, :149:22]
        probes_done = _RANDOM[2'h3][9];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33, :150:24]
        probes_toN = _RANDOM[2'h3][10];	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:136:33, :151:23]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_status_valid = request_valid;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30]
  assign io_status_bits_set = request_set;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_status_bits_tag = request_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_status_bits_way = meta_way;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  assign io_status_bits_blockC = ~meta_valid;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:99:27, :168:28]
  assign io_status_bits_nestC = _io_status_bits_nestC_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:173:39]
  assign io_schedule_valid = _io_schedule_valid_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:193:105]
  assign io_schedule_bits_a_valid = _io_schedule_bits_a_valid_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:184:55]
  assign io_schedule_bits_a_bits_tag = request_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_a_bits_set = request_set;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_a_bits_param = {1'h0, req_needT ? (meta_hit ? 2'h2 : 2'h1) : 2'h0};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :100:17, :282:{35,41,56}, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:270:70]
  assign io_schedule_bits_a_bits_block = request_size != 3'h6 | ~(request_opcode == 3'h0 | (&request_opcode));	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :283:{51,91}, :284:{38,55,71}, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:271:{14,52}]
  assign io_schedule_bits_b_valid = _io_schedule_bits_b_valid_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:185:41]
  assign io_schedule_bits_b_bits_param = s_rprobe ? (request_prio_1 ? request_param : {1'h0, req_needT ? 2'h2 : 2'h1}) : 3'h2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20, :121:33, :286:{41,61,97}, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:270:70, :282:43]
  assign io_schedule_bits_b_bits_tag = s_rprobe ? request_tag : meta_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17, :121:33, :287:41]
  assign io_schedule_bits_b_bits_set = request_set;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_b_bits_clients = evict_c & ~excluded_client;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :279:28, :289:{51,53}]
  assign io_schedule_bits_c_valid = _io_schedule_bits_c_valid_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:186:43]
  assign io_schedule_bits_c_bits_opcode = {2'h3, meta_dirty};	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :290:41]
  assign io_schedule_bits_c_bits_param = meta_state == 2'h1 ? 3'h2 : 3'h1;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17, :291:{41,53}, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:282:43]
  assign io_schedule_bits_c_bits_tag = meta_tag;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  assign io_schedule_bits_c_bits_set = request_set;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_c_bits_way = meta_way;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  assign io_schedule_bits_c_bits_dirty = meta_dirty;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  assign io_schedule_bits_d_valid = _io_schedule_bits_d_valid_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:187:57]
  assign io_schedule_bits_d_bits_prio_0 = request_prio_0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_d_bits_prio_2 = request_prio_2;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_d_bits_opcode = request_opcode;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_d_bits_param = req_acquire ? (request_param == 3'h1 ? 3'h1 : request_param == 3'h2 ? {1'h0, meta_hit & evict_c & req_clientBit ? 2'h2 : 2'h1} : request_param == 3'h0 ? {2'h0, req_acquire & (meta_hit ? ~evict_c & (&meta_state) : gotT)} : request_param) : request_param;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:97:30, :98:20, :100:17, :148:17, :219:53, :220:25, :221:{34,40,67,81}, :276:30, :298:41, :301:53, generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/Parameters.scala:282:43, generators/rocket-chip/src/main/scala/diplomacy/Parameters.scala:46:9, src/main/scala/chisel3/util/Mux.scala:77:13]
  assign io_schedule_bits_d_bits_size = request_size;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_d_bits_source = request_source;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_d_bits_offset = request_offset;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_d_bits_put = request_put;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_d_bits_set = request_set;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_d_bits_way = meta_way;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  assign io_schedule_bits_d_bits_bad = bad_grant;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:149:22]
  assign io_schedule_bits_e_valid = _io_schedule_bits_e_valid_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:188:43]
  assign io_schedule_bits_e_bits_sink = sink;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:147:17]
  assign io_schedule_bits_x_valid = _io_schedule_bits_x_valid_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:189:40]
  assign io_schedule_bits_dir_valid = _io_schedule_bits_dir_valid_output;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:190:66]
  assign io_schedule_bits_dir_bits_set = request_set;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20]
  assign io_schedule_bits_dir_bits_way = meta_way;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:100:17]
  assign io_schedule_bits_dir_bits_data_dirty = s_release & _io_schedule_bits_dir_bits_data_WIRE_dirty;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:124:33, :223:52, :251:20, :252:21, :310:41]
  assign io_schedule_bits_dir_bits_data_state = s_release ? _io_schedule_bits_dir_bits_data_WIRE_state : 2'h0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:124:33, :223:52, :251:20, :252:21, :310:41]
  assign io_schedule_bits_dir_bits_data_clients = s_release & _io_schedule_bits_dir_bits_data_WIRE_clients;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:124:33, :223:52, :251:20, :252:21, :310:41]
  assign io_schedule_bits_dir_bits_data_tag = s_release ? (_GEN_0 ? meta_tag : request_tag) : 16'h0;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:98:20, :100:17, :124:33, :215:38, :223:52, :228:53, :247:30, :272:19, :310:41]
  assign io_schedule_bits_reload = no_wait;	// @[generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/MSHR.scala:183:83]
endmodule

