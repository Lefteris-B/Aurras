// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module RecFNToIN(
  input  [32:0] io_in,	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:48:16]
  output [7:0]  io_out,	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:48:16]
  output [2:0]  io_intExceptionFlags	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:48:16]
);

  wire        rawIn_isNaN = (&(io_in[31:30])) & io_in[29];	// @[generators/hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:{28,53}, :56:{33,41}]
  wire [30:0] shiftedSig = {7'h0, io_in[31], io_in[22:0]} << (io_in[31] ? io_in[25:23] : 3'h0);	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:60:30, :82:49, :83:16, :84:27, :142:12, generators/hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:61:49]
  wire [1:0]  _roundIncr_near_even_T_6 = {shiftedSig[22], |(shiftedSig[21:0])};	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:82:49, :88:{51,69}, :91:50]
  wire        roundIncr_near_even = io_in[31] & ((&(shiftedSig[23:22])) | (&_roundIncr_near_even_T_6)) | ~(io_in[31]) & (&(io_in[30:23])) & (|_roundIncr_near_even_T_6);	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:60:30, :61:28, :62:{27,47}, :82:49, :91:50, :93:{25,39,46,51,71,78}, :94:{26,46}]
  wire [7:0]  complUnroundedInt = {8{io_in[32]}} ^ shiftedSig[30:23];	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:82:49, :89:52, :102:32, generators/hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:59:25]
  wire        magGeOne_atOverflowEdge = io_in[30:23] == 8'h7;	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:61:28, :109:43]
  wire        common_overflow = io_in[31] & ((|(io_in[30:26])) | (io_in[32] ? magGeOne_atOverflowEdge & ((|(shiftedSig[29:23])) | roundIncr_near_even) : magGeOne_atOverflowEdge | io_in[30:23] == 8'h6 & (&(shiftedSig[28:23])) & roundIncr_near_even));	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:60:30, :61:28, :82:49, :89:52, :93:78, :109:43, :112:{38,56}, :114:12, :115:{21,36}, :117:24, :118:49, :119:{42,60,64}, :120:49, :121:{38,60}, generators/hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:59:25]
  wire        invalidExc = rawIn_isNaN | (&(io_in[31:30])) & ~(io_in[29]);	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:132:34, generators/hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :53:{28,53}, :56:{33,41}, :57:{33,36}]
  wire        excSign = ~rawIn_isNaN & io_in[32];	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:136:{19,32}, generators/hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:56:33, :59:25]
  assign io_out = invalidExc | common_overflow ? {excSign, {7{~excSign}}} : roundIncr_near_even ^ io_in[32] ? complUnroundedInt + 8'h1 : complUnroundedInt;	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:93:78, :102:32, :104:{12,23}, :105:31, :114:12, :132:34, :136:32, :141:11, :142:{12,13}, :144:{18,30}, generators/hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:59:25]
  assign io_intExceptionFlags = {invalidExc, ~invalidExc & common_overflow, ~invalidExc & ~common_overflow & (io_in[31] ? (|_roundIncr_near_even_T_6) : (|(io_in[31:29])))};	// @[generators/hardfloat/hardfloat/src/main/scala/RecFNToIN.scala:60:30, :91:{29,50,57}, :114:12, :132:34, :133:{20,32}, :134:{35,52}, :145:52, generators/hardfloat/hardfloat/src/main/scala/rawFloatFromRecFN.scala:51:21, :52:{28,53}]
endmodule

