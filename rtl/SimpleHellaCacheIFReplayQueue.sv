// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module SimpleHellaCacheIFReplayQueue(
  input        clock,
               reset,
               io_nack_valid,	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:21:14]
  input  [5:0] io_nack_bits,	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:21:14]
  input        io_resp_valid,	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:21:14]
  input  [6:0] io_resp_bits_tag,	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:21:14]
  input        io_replay_ready,	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:21:14]
  output       io_replay_valid	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:21:14]
);

  wire _nackq_io_enq_ready;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:44:21]
  wire _nackq_io_deq_valid;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:44:21]
  reg  replaying;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:45:26]
  wire _io_replay_valid_output = _nackq_io_deq_valid & ~replaying;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:44:21, :45:26, :55:{41,44}]
  wire replay_complete = io_resp_valid & replaying & io_resp_bits_tag == 7'h0;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:45:26, :65:{52,72}]
  wire nack_head = io_nack_valid & _nackq_io_deq_valid & io_nack_bits == 6'h0;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:44:21, :66:{55,71}]
  wire _nackq_io_enq_valid_T_1 = io_nack_valid & ~nack_head;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:66:55, :70:{39,42}]
  `ifndef SYNTHESIS	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:72:9]
    always @(posedge clock) begin	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:72:9]
      if (~reset & ~(~_nackq_io_enq_valid_T_1 | _nackq_io_enq_ready)) begin	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:44:21, :70:39, :72:{9,10,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:72:9]
          $error("Assertion failed: SimpleHellaCacheIF: ReplayQueue nack queue overflow\n    at SimpleHellaCacheIF.scala:72 assert(!nackq.io.enq.valid || nackq.io.enq.ready,\n");	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:72:9]
        if (`STOP_COND_)	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:72:9]
          $fatal;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:72:9]
      end
      if (~reset & ~(~replay_complete | _nackq_io_deq_valid)) begin	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:44:21, :65:52, :72:9, :77:{9,10,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:77:9]
          $error("Assertion failed: SimpleHellaCacheIF: ReplayQueue nack queue underflow\n    at SimpleHellaCacheIF.scala:77 assert(!nackq.io.deq.ready || nackq.io.deq.valid,\n");	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:77:9]
        if (`STOP_COND_)	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:77:9]
          $fatal;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:77:9]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset)
      replaying <= 1'h0;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:21:14, :35:17, :45:26, :85:22, :86:25]
    else
      replaying <= ~(nack_head | replay_complete) & (io_replay_ready & _io_replay_valid_output | replaying);	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:45:26, :55:41, :65:52, :66:55, :90:{25,37}, :91:{19,39,51}, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:8];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'h9; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        replaying = _RANDOM[4'h8][0];	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:45:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue_78 nackq (	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:44:21]
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_nackq_io_enq_ready),
    .io_enq_valid (_nackq_io_enq_valid_T_1),	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:70:39]
    .io_deq_ready (replay_complete),	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:65:52]
    .io_deq_valid (_nackq_io_deq_valid)
  );
  assign io_replay_valid = _io_replay_valid_output;	// @[generators/rocket-chip/src/main/scala/rocket/SimpleHellaCacheIF.scala:55:41]
endmodule

