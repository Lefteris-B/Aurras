// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module UARTRx(
  input         clock,
                reset,
                io_en,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:29:14]
                io_in,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:29:14]
  output        io_out_valid,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:29:14]
  output [7:0]  io_out_bits,	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:29:14]
  input  [15:0] io_div	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:29:14]
);

  reg  [1:0]  debounce;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25]
  reg  [12:0] prescaler;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:63:22]
  reg  [3:0]  data_count;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:70:23]
  reg  [3:0]  sample_count;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:73:25]
  reg  [2:0]  sample;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:102:19]
  reg  [7:0]  shifter;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:106:20]
  reg         valid;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:108:22]
  reg         state;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:114:22]
  wire [7:0]  _countdown_T_1 = {data_count, sample_count} - 8'h1;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:70:23, :73:25, :83:49]
  wire        pulse = prescaler == 13'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:63:22, :66:26]
  wire        data_last = data_count == 4'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:70:23, :71:31]
  wire        sample_mid = sample_count == 4'h7;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:73:25, :74:34]
  wire        _GEN = ~io_in & (&debounce);	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :60:32, :114:22, :119:15, :122:21, :124:29, :125:17]
  wire        _GEN_0 = state & pulse;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:66:26, :102:19, :114:22, :116:18, :138:20, :140:16]
  wire        _GEN_1 = state & pulse & sample_mid;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:66:26, :74:34, :109:9, :114:22, :116:18, :138:20, :144:27, :159:30]
  wire        restore = ~state & ~io_in & (&debounce) | pulse;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :60:32, :64:26, :66:26, :98:23, :114:22, :116:18, :119:15, :122:21, :124:29]
  always @(posedge clock) begin
    if (reset) begin
      debounce <= 2'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25]
      valid <= 1'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:108:22]
      state <= 1'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:114:22]
    end
    else begin
      if (io_en) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:29:14]
        if (state) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:114:22]
        end
        else if (io_in) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:29:14]
          if (io_in & (|debounce))	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :61:32, :119:23]
            debounce <= debounce - 2'h1;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :120:30]
        end
        else	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:29:14]
          debounce <= debounce + 2'h1;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :123:30]
      end
      else	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:29:14]
        debounce <= 2'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25]
      valid <= state & _GEN_1 & data_last;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:71:31, :108:22, :109:9, :114:22, :116:18, :138:20, :144:27, :159:30]
      if (state)	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:114:22]
        state <= ~(state & pulse & sample_mid & data_last) & state;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:66:26, :71:31, :74:34, :114:22, :116:18, :138:20, :144:27, :159:30, :160:21]
      else	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:114:22]
        state <= _GEN | state;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:114:22, :122:21, :124:29, :125:17]
    end
    if (state | _GEN)	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:114:22, :116:18, :122:21, :124:29, :125:17]
      prescaler <= (restore ? {1'h0, io_div[15:4]} : prescaler) - {12'h0, ~(restore & sample_count < io_div[3:0])};	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:61:32, :63:22, :72:32, :73:25, :88:25, :89:30, :98:23, :99:{25,42}, :100:{37,42,51}]
    if (state) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:114:22]
      if (_GEN_0) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:102:19, :116:18, :138:20, :140:16]
        data_count <= _countdown_T_1[7:4];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:70:23, :83:49, :141:33]
        sample_count <= _countdown_T_1[3:0];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:73:25, :83:49, :142:34]
      end
    end
    else if (_GEN) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:114:22, :122:21, :124:29, :125:17]
      data_count <= 4'h9;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:70:23, :129:92]
      sample_count <= 4'hF;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:73:25, :131:24]
    end
    if (state & _GEN_0)	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:102:19, :114:22, :116:18, :138:20, :140:16]
      sample <= {sample[1:0], io_in};	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:102:19, :140:16]
    if (~state | ~_GEN_1 | data_last) begin	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:71:31, :106:20, :109:9, :114:22, :116:18, :138:20, :144:27, :159:30]
    end
    else	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:106:20, :116:18]
      shifter <= {sample[0] & sample[1] | sample[0] & sample[2] | sample[1] & sample[2], shifter[7:1]};	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:102:19, :104:31, :106:20, :163:{29,45}, generators/rocket-chip/src/main/scala/util/Misc.scala:167:48, :168:22]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        debounce = _RANDOM[1'h0][1:0];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25]
        prescaler = _RANDOM[1'h0][14:2];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :63:22]
        data_count = _RANDOM[1'h0][18:15];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :70:23]
        sample_count = _RANDOM[1'h0][22:19];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :73:25]
        sample = _RANDOM[1'h0][25:23];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :102:19]
        shifter = {_RANDOM[1'h0][31:26], _RANDOM[1'h1][1:0]};	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:59:25, :106:20]
        valid = _RANDOM[1'h1][2];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:106:20, :108:22]
        state = _RANDOM[1'h1][3];	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:106:20, :114:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = valid;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:108:22]
  assign io_out_bits = shifter;	// @[generators/rocket-chip-blocks/src/main/scala/devices/uart/UARTRx.scala:106:20]
endmodule

