// Generated by CIRCT firtool-1.61.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module LoopMatmulLdD(
  input         clock,
                reset,
  output        io_req_ready,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  input         io_req_valid,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  input  [15:0] io_req_bits_max_j,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
                io_req_bits_max_i,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  input  [2:0]  io_req_bits_pad_j,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
                io_req_bits_pad_i,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  input  [33:0] io_req_bits_dram_addr,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
                io_req_bits_dram_stride,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  input         io_req_bits_low_d,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  input  [9:0]  io_req_bits_addr_start,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  input         io_req_bits_loop_id,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
                io_cmd_ready,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  output        io_cmd_valid,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  output [63:0] io_cmd_bits_rs1,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
                io_cmd_bits_rs2,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  output        io_idle,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  input         io_rob_overloaded,	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
  output        io_loop_id	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:256:14]
);

  reg         state;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22]
  reg  [15:0] req_max_j;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
  reg  [15:0] req_max_i;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
  reg  [2:0]  req_pad_j;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
  reg  [2:0]  req_pad_i;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
  reg  [33:0] req_dram_addr;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
  reg  [33:0] req_dram_stride;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
  reg         req_low_d;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
  reg  [9:0]  req_addr_start;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
  reg         req_loop_id;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
  wire [15:0] max_blocks = req_low_d ? (req_max_j < 16'h9 ? req_max_j : 16'h8) : req_max_j < 16'h3 ? req_max_j : 16'h2;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16, :274:{23,38,49}, :275:{8,19}]
  reg  [15:0] j;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:277:14]
  reg  [15:0] i;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:278:14]
  wire [28:0] _dram_offset_T_5 = {13'h0, i} * req_dram_stride[28:0];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16, :278:14, :282:{39,57}]
  wire [28:0] _sp_addr_T_4 = {19'h0, req_addr_start} + {{10'h0, i} * {10'h0, req_max_j} + {10'h0, j}, 3'h0};	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16, :277:14, :278:14, :285:{32,37,49}]
  wire [16:0] _next_j_T_4 = {1'h0, j} + {1'h0, max_blocks};	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :274:23, :277:14, :286:22]
  wire [15:0] blocks = _next_j_T_4[15:0] <= req_max_j ? max_blocks : req_max_j - j;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16, :274:23, :277:14, :286:{19,22,35,70}]
  wire [15:0] _next_i_max_T = req_max_i - 16'h1;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16, :288:48]
  wire        _io_cmd_valid_output = state & ~io_rob_overloaded & (|req_dram_addr);	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :272:16, :306:{37,56,73}]
  wire        _GEN = req_dram_addr == 34'h0;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16, :282:39, :311:23]
  wire        _GEN_0 = io_cmd_ready & _io_cmd_valid_output;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:306:56, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  wire [16:0] _next_i_T_3 = {1'h0, i} + 17'h1;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :278:14, :288:48, generators/gemmini/src/main/scala/gemmini/Util.scala:41:15]
  wire        _next_i_T_4 = _next_i_T_3 > {1'h0, _next_i_max_T};	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :288:48, generators/gemmini/src/main/scala/gemmini/Util.scala:41:15, :43:17]
  wire [15:0] next_i = _next_i_T_4 ? 16'h0 : _next_i_T_3[15:0];	// @[generators/gemmini/src/main/scala/gemmini/Util.scala:41:15, :43:17, src/main/scala/chisel3/util/Mux.scala:141:16]
  wire        _next_j_T_5 = _next_j_T_4 > {1'h0, req_max_j - 16'h1};	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :272:16, :286:22, generators/gemmini/src/main/scala/gemmini/Util.scala:39:28, :43:17]
  wire        _GEN_1 = ~state & io_req_valid;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :302:25, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  always @(posedge clock) begin
    if (reset)
      state <= 1'h0;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22]
    else
      state <= _GEN_1 | ~(_GEN | _GEN_0 & ~(|next_i) & ((|next_i) ? j : _next_j_T_5 ? 16'h0 : _next_j_T_4[15:0]) == 16'h0) & state;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :277:14, :286:22, :311:{23,32}, :312:11, :313:28, :316:60, :321:{36,45}, :322:13, :326:22, :328:11, generators/gemmini/src/main/scala/gemmini/Util.scala:41:15, :43:17, src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/chisel3/util/Mux.scala:141:16]
    if (_GEN_1) begin	// @[src/main/scala/chisel3/util/Decoupled.scala:52:35]
      req_max_j <= io_req_bits_max_j;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
      req_max_i <= io_req_bits_max_i;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
      req_pad_j <= io_req_bits_pad_j;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
      req_pad_i <= io_req_bits_pad_i;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
      req_dram_addr <= io_req_bits_dram_addr;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
      req_dram_stride <= io_req_bits_dram_stride;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
      req_low_d <= io_req_bits_low_d;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
      req_addr_start <= io_req_bits_addr_start;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
      req_loop_id <= io_req_bits_loop_id;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
      j <= 16'h0;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:277:14, src/main/scala/chisel3/util/Mux.scala:141:16]
      i <= 16'h0;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:278:14, src/main/scala/chisel3/util/Mux.scala:141:16]
    end
    else begin	// @[src/main/scala/chisel3/util/Decoupled.scala:52:35]
      if (_GEN | ~_GEN_0 | (|next_i)) begin	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:277:14, :278:14, :311:{23,32}, :313:28, :316:60, src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/chisel3/util/Mux.scala:141:16]
      end
      else if (_next_j_T_5)	// @[generators/gemmini/src/main/scala/gemmini/Util.scala:43:17]
        j <= 16'h0;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:277:14, src/main/scala/chisel3/util/Mux.scala:141:16]
      else	// @[generators/gemmini/src/main/scala/gemmini/Util.scala:43:17]
        j <= _next_j_T_4[15:0];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:277:14, :286:22, generators/gemmini/src/main/scala/gemmini/Util.scala:41:15]
      if (_GEN | ~_GEN_0) begin	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:278:14, :311:{23,32}, :313:28, src/main/scala/chisel3/util/Decoupled.scala:52:35]
      end
      else if (_next_i_T_4)	// @[generators/gemmini/src/main/scala/gemmini/Util.scala:43:17]
        i <= 16'h0;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:278:14, src/main/scala/chisel3/util/Mux.scala:141:16]
      else	// @[generators/gemmini/src/main/scala/gemmini/Util.scala:43:17]
        i <= _next_i_T_3[15:0];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:278:14, generators/gemmini/src/main/scala/gemmini/Util.scala:41:15]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i_0 = 3'h0; i_0 < 3'h5; i_0 += 3'h1) begin
          _RANDOM[i_0] = `RANDOM;
        end
        state = _RANDOM[3'h0][0];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22]
        req_max_j = _RANDOM[3'h0][16:1];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :272:16]
        req_max_i = {_RANDOM[3'h0][31:17], _RANDOM[3'h1][0]};	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :272:16]
        req_pad_j = _RANDOM[3'h1][3:1];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
        req_pad_i = _RANDOM[3'h1][6:4];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
        req_dram_addr = {_RANDOM[3'h1][31:7], _RANDOM[3'h2][8:0]};	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
        req_dram_stride = {_RANDOM[3'h2][31:9], _RANDOM[3'h3][10:0]};	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
        req_low_d = _RANDOM[3'h3][11];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
        req_addr_start = _RANDOM[3'h3][21:12];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
        req_loop_id = _RANDOM[3'h3][22];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
        j = {_RANDOM[3'h3][31:23], _RANDOM[3'h4][6:0]};	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16, :277:14]
        i = _RANDOM[3'h4][22:7];	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:277:14, :278:14]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_req_ready = ~state;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :302:25]
  assign io_cmd_valid = _io_cmd_valid_output;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:306:56]
  assign io_cmd_bits_rs1 = {29'h0, {3'h0, req_low_d ? {_dram_offset_T_5 + {13'h0, j}, 3'h0} : {_dram_offset_T_5[26:0] + {11'h0, j}, 5'h0}} + {1'h0, req_dram_addr}};	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :272:16, :277:14, :282:{24,39,57}, :283:{26,46}, :284:33, :293:16, :1139:17]
  assign io_cmd_bits_rs2 = {12'h0, 4'h8 - {1'h0, i == _next_i_max_T ? req_pad_i : 3'h0}, 9'h0, {blocks[3:0], 3'h0} - {4'h0, j + blocks >= req_max_j ? req_pad_j : 3'h0}, 3'h4, _sp_addr_T_4[28:26], 12'h0, _sp_addr_T_4[13:0]};	// @[generators/gemmini/src/main/scala/gemmini/LocalAddr.scala:108:37, generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :272:16, :277:14, :278:14, :285:32, :286:19, :287:{38,43,46,55}, :288:{27,32,35,48}, :296:16, :300:32]
  assign io_idle = ~state;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:270:22, :302:25]
  assign io_loop_id = req_loop_id;	// @[generators/gemmini/src/main/scala/gemmini/LoopMatmul.scala:272:16]
endmodule

